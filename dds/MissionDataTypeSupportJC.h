/* -*- C++ -*- */
#ifndef IDL2JNI_GENERATED_MISSIONDATATYPESUPPORTJC_H
#define IDL2JNI_GENERATED_MISSIONDATATYPESUPPORTJC_H
#include "MissionDataTypeSupportC.h"
#include "MissionDataJC.h"
#include "dds/DdsDcpsInfrastructureJC.h"
#include "dds/DdsDcpsPublicationJC.h"
#include "dds/DdsDcpsSubscriptionExtJC.h"
#include "dds/DdsDcpsTopicJC.h"
#include "dds/DdsDcpsTypeSupportExtJC.h"
#include "idl2jni_BaseJavaPeer.h"
#include "idl2jni_jni.h"
#include "idl2jni_runtime.h"
#include "MissionData_Export.h"
/* Generated by /Users/chidiebereonyedinma/Documents/DDS/OpenDDS-3.13.3/bin/idl2jni running on input file MissionDataTypeSupport.idl */


/* Begin MODULE: MissionData */



/* Begin TYPEDEF: MissionPlanSeq */

MissionData_Export
void copyToCxx (JNIEnv *jni, MissionData::MissionPlanSeq &target, jobjectArray source);
MissionData_Export
void copyToJava (JNIEnv *jni, jobjectArray &target, const MissionData::MissionPlanSeq &source, bool createNewObject = false);

/* End TYPEDEF: MissionPlanSeq */


/* Begin INTERFACE: MissionPlanTypeSupport */

MissionData_Export
void copyToCxx (JNIEnv *jni, MissionData::MissionPlanTypeSupport_var &target, jobject source);
MissionData_Export
void copyToJava (JNIEnv *jni, jobject &target, const MissionData::MissionPlanTypeSupport_var &source, bool createNewObject = false);

class MissionData_Export MissionData_MissionPlanTypeSupportJavaPeer
  : public virtual OpenDDS_DCPS_TypeSupportJavaPeer
  , public virtual MissionData::MissionPlanTypeSupport
{
public:
  MissionData_MissionPlanTypeSupportJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_TypeSupportJavaPeer (jni, java)
    , OpenDDS_DCPS_TypeSupportJavaPeer (jni, java)
  {}

};


/* End INTERFACE: MissionPlanTypeSupport */


/* Begin INTERFACE: MissionPlanDataWriter */

MissionData_Export
void copyToCxx (JNIEnv *jni, MissionData::MissionPlanDataWriter_var &target, jobject source);
MissionData_Export
void copyToJava (JNIEnv *jni, jobject &target, const MissionData::MissionPlanDataWriter_var &source, bool createNewObject = false);

class MissionData_Export MissionData_MissionPlanDataWriterJavaPeer
  : public virtual DDS_DataWriterJavaPeer
  , public virtual MissionData::MissionPlanDataWriter
{
public:
  MissionData_MissionPlanDataWriterJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataWriterJavaPeer (jni, java)
  {}

  DDS::InstanceHandle_t register_instance (const MissionData::MissionPlan& instance);

  DDS::InstanceHandle_t register_instance_w_timestamp (const MissionData::MissionPlan& instance, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t unregister_instance (const MissionData::MissionPlan& instance, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t unregister_instance_w_timestamp (const MissionData::MissionPlan& instance, DDS::InstanceHandle_t handle, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t write (const MissionData::MissionPlan& instance_data, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t write_w_timestamp (const MissionData::MissionPlan& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t dispose (const MissionData::MissionPlan& instance_data, DDS::InstanceHandle_t instance_handle);

  DDS::ReturnCode_t dispose_w_timestamp (const MissionData::MissionPlan& instance_data, DDS::InstanceHandle_t instance_handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t get_key_value (MissionData::MissionPlan& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const MissionData::MissionPlan& instance_data);

};


/* End INTERFACE: MissionPlanDataWriter */


/* Begin INTERFACE: MissionPlanDataReader */

MissionData_Export
void copyToCxx (JNIEnv *jni, MissionData::MissionPlanDataReader_var &target, jobject source);
MissionData_Export
void copyToJava (JNIEnv *jni, jobject &target, const MissionData::MissionPlanDataReader_var &source, bool createNewObject = false);

class MissionData_Export MissionData_MissionPlanDataReaderJavaPeer
  : public virtual OpenDDS_DCPS_DataReaderExJavaPeer
  , public virtual MissionData::MissionPlanDataReader
{
public:
  MissionData_MissionPlanDataReaderJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataReaderJavaPeer (jni, java)
    , OpenDDS_DCPS_DataReaderExJavaPeer (jni, java)
  {}

  DDS::ReturnCode_t read (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_w_condition (MissionData::MissionPlanSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_w_condition (MissionData::MissionPlanSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t read_next_sample (MissionData::MissionPlan& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t take_next_sample (MissionData::MissionPlan& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t read_instance (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_instance (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_instance_w_condition (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_instance_w_condition (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t read_next_instance (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_next_instance (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_next_instance_w_condition (MissionData::MissionPlanSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_next_instance_w_condition (MissionData::MissionPlanSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t return_loan (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq);

  DDS::ReturnCode_t get_key_value (MissionData::MissionPlan& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const MissionData::MissionPlan& instance_data);

};


/* End INTERFACE: MissionPlanDataReader */

/* End MODULE: MissionData */


/* Begin MODULE: MissionData */



/* Begin TYPEDEF: NormalizedPointsSeq */

MissionData_Export
void copyToCxx (JNIEnv *jni, MissionData::NormalizedPointsSeq &target, jobjectArray source);
MissionData_Export
void copyToJava (JNIEnv *jni, jobjectArray &target, const MissionData::NormalizedPointsSeq &source, bool createNewObject = false);

/* End TYPEDEF: NormalizedPointsSeq */


/* Begin INTERFACE: NormalizedPointsTypeSupport */

MissionData_Export
void copyToCxx (JNIEnv *jni, MissionData::NormalizedPointsTypeSupport_var &target, jobject source);
MissionData_Export
void copyToJava (JNIEnv *jni, jobject &target, const MissionData::NormalizedPointsTypeSupport_var &source, bool createNewObject = false);

class MissionData_Export MissionData_NormalizedPointsTypeSupportJavaPeer
  : public virtual OpenDDS_DCPS_TypeSupportJavaPeer
  , public virtual MissionData::NormalizedPointsTypeSupport
{
public:
  MissionData_NormalizedPointsTypeSupportJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_TypeSupportJavaPeer (jni, java)
    , OpenDDS_DCPS_TypeSupportJavaPeer (jni, java)
  {}

};


/* End INTERFACE: NormalizedPointsTypeSupport */


/* Begin INTERFACE: NormalizedPointsDataWriter */

MissionData_Export
void copyToCxx (JNIEnv *jni, MissionData::NormalizedPointsDataWriter_var &target, jobject source);
MissionData_Export
void copyToJava (JNIEnv *jni, jobject &target, const MissionData::NormalizedPointsDataWriter_var &source, bool createNewObject = false);

class MissionData_Export MissionData_NormalizedPointsDataWriterJavaPeer
  : public virtual DDS_DataWriterJavaPeer
  , public virtual MissionData::NormalizedPointsDataWriter
{
public:
  MissionData_NormalizedPointsDataWriterJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataWriterJavaPeer (jni, java)
  {}

  DDS::InstanceHandle_t register_instance (const MissionData::NormalizedPoints& instance);

  DDS::InstanceHandle_t register_instance_w_timestamp (const MissionData::NormalizedPoints& instance, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t unregister_instance (const MissionData::NormalizedPoints& instance, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t unregister_instance_w_timestamp (const MissionData::NormalizedPoints& instance, DDS::InstanceHandle_t handle, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t write (const MissionData::NormalizedPoints& instance_data, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t write_w_timestamp (const MissionData::NormalizedPoints& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t dispose (const MissionData::NormalizedPoints& instance_data, DDS::InstanceHandle_t instance_handle);

  DDS::ReturnCode_t dispose_w_timestamp (const MissionData::NormalizedPoints& instance_data, DDS::InstanceHandle_t instance_handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t get_key_value (MissionData::NormalizedPoints& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const MissionData::NormalizedPoints& instance_data);

};


/* End INTERFACE: NormalizedPointsDataWriter */


/* Begin INTERFACE: NormalizedPointsDataReader */

MissionData_Export
void copyToCxx (JNIEnv *jni, MissionData::NormalizedPointsDataReader_var &target, jobject source);
MissionData_Export
void copyToJava (JNIEnv *jni, jobject &target, const MissionData::NormalizedPointsDataReader_var &source, bool createNewObject = false);

class MissionData_Export MissionData_NormalizedPointsDataReaderJavaPeer
  : public virtual OpenDDS_DCPS_DataReaderExJavaPeer
  , public virtual MissionData::NormalizedPointsDataReader
{
public:
  MissionData_NormalizedPointsDataReaderJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataReaderJavaPeer (jni, java)
    , OpenDDS_DCPS_DataReaderExJavaPeer (jni, java)
  {}

  DDS::ReturnCode_t read (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_w_condition (MissionData::NormalizedPointsSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_w_condition (MissionData::NormalizedPointsSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t read_next_sample (MissionData::NormalizedPoints& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t take_next_sample (MissionData::NormalizedPoints& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t read_instance (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_instance (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_instance_w_condition (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_instance_w_condition (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t read_next_instance (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_next_instance (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_next_instance_w_condition (MissionData::NormalizedPointsSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_next_instance_w_condition (MissionData::NormalizedPointsSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t return_loan (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq);

  DDS::ReturnCode_t get_key_value (MissionData::NormalizedPoints& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const MissionData::NormalizedPoints& instance_data);

};


/* End INTERFACE: NormalizedPointsDataReader */

/* End MODULE: MissionData */


/* Begin MODULE: MissionData */



/* Begin TYPEDEF: TelemetrySeq */

MissionData_Export
void copyToCxx (JNIEnv *jni, MissionData::TelemetrySeq &target, jobjectArray source);
MissionData_Export
void copyToJava (JNIEnv *jni, jobjectArray &target, const MissionData::TelemetrySeq &source, bool createNewObject = false);

/* End TYPEDEF: TelemetrySeq */


/* Begin INTERFACE: TelemetryTypeSupport */

MissionData_Export
void copyToCxx (JNIEnv *jni, MissionData::TelemetryTypeSupport_var &target, jobject source);
MissionData_Export
void copyToJava (JNIEnv *jni, jobject &target, const MissionData::TelemetryTypeSupport_var &source, bool createNewObject = false);

class MissionData_Export MissionData_TelemetryTypeSupportJavaPeer
  : public virtual OpenDDS_DCPS_TypeSupportJavaPeer
  , public virtual MissionData::TelemetryTypeSupport
{
public:
  MissionData_TelemetryTypeSupportJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_TypeSupportJavaPeer (jni, java)
    , OpenDDS_DCPS_TypeSupportJavaPeer (jni, java)
  {}

};


/* End INTERFACE: TelemetryTypeSupport */


/* Begin INTERFACE: TelemetryDataWriter */

MissionData_Export
void copyToCxx (JNIEnv *jni, MissionData::TelemetryDataWriter_var &target, jobject source);
MissionData_Export
void copyToJava (JNIEnv *jni, jobject &target, const MissionData::TelemetryDataWriter_var &source, bool createNewObject = false);

class MissionData_Export MissionData_TelemetryDataWriterJavaPeer
  : public virtual DDS_DataWriterJavaPeer
  , public virtual MissionData::TelemetryDataWriter
{
public:
  MissionData_TelemetryDataWriterJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataWriterJavaPeer (jni, java)
  {}

  DDS::InstanceHandle_t register_instance (const MissionData::Telemetry& instance);

  DDS::InstanceHandle_t register_instance_w_timestamp (const MissionData::Telemetry& instance, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t unregister_instance (const MissionData::Telemetry& instance, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t unregister_instance_w_timestamp (const MissionData::Telemetry& instance, DDS::InstanceHandle_t handle, const DDS::Time_t& timestamp);

  DDS::ReturnCode_t write (const MissionData::Telemetry& instance_data, DDS::InstanceHandle_t handle);

  DDS::ReturnCode_t write_w_timestamp (const MissionData::Telemetry& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t dispose (const MissionData::Telemetry& instance_data, DDS::InstanceHandle_t instance_handle);

  DDS::ReturnCode_t dispose_w_timestamp (const MissionData::Telemetry& instance_data, DDS::InstanceHandle_t instance_handle, const DDS::Time_t& source_timestamp);

  DDS::ReturnCode_t get_key_value (MissionData::Telemetry& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const MissionData::Telemetry& instance_data);

};


/* End INTERFACE: TelemetryDataWriter */


/* Begin INTERFACE: TelemetryDataReader */

MissionData_Export
void copyToCxx (JNIEnv *jni, MissionData::TelemetryDataReader_var &target, jobject source);
MissionData_Export
void copyToJava (JNIEnv *jni, jobject &target, const MissionData::TelemetryDataReader_var &source, bool createNewObject = false);

class MissionData_Export MissionData_TelemetryDataReaderJavaPeer
  : public virtual OpenDDS_DCPS_DataReaderExJavaPeer
  , public virtual MissionData::TelemetryDataReader
{
public:
  MissionData_TelemetryDataReaderJavaPeer (JNIEnv *jni, jobject java)
    : IDL2JNI_BaseJavaPeer (jni, java)
    , DDS_EntityJavaPeer (jni, java)
    , DDS_DataReaderJavaPeer (jni, java)
    , OpenDDS_DCPS_DataReaderExJavaPeer (jni, java)
  {}

  DDS::ReturnCode_t read (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_w_condition (MissionData::TelemetrySeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_w_condition (MissionData::TelemetrySeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t read_next_sample (MissionData::Telemetry& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t take_next_sample (MissionData::Telemetry& received_data, DDS::SampleInfo& sample_info);

  DDS::ReturnCode_t read_instance (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_instance (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_instance_w_condition (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_instance_w_condition (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t read_next_instance (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t take_next_instance (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states);

  DDS::ReturnCode_t read_next_instance_w_condition (MissionData::TelemetrySeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t take_next_instance_w_condition (MissionData::TelemetrySeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition);

  DDS::ReturnCode_t return_loan (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq);

  DDS::ReturnCode_t get_key_value (MissionData::Telemetry& key_holder, DDS::InstanceHandle_t handle);

  DDS::InstanceHandle_t lookup_instance (const MissionData::Telemetry& instance_data);

};


/* End INTERFACE: TelemetryDataReader */

/* End MODULE: MissionData */
#endif /* IDL2JNI_GENERATED_MISSIONDATATYPESUPPORTJC_H */
