// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p16
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_MISSIONDATATYPESUPPORTC_J61MK0_H_
#define _TAO_IDL_MISSIONDATATYPESUPPORTC_J61MK0_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include /**/ "MissionData_Export.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "dds/DCPS/ZeroCopyInfoSeq_T.h"
#include "dds/DCPS/ZeroCopySeq_T.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "MissionDataC.h"
#include "dds/DdsDcpsInfrastructureC.h"
#include "dds/DdsDcpsPublicationC.h"
#include "dds/DdsDcpsSubscriptionExtC.h"
#include "dds/DdsDcpsTopicC.h"
#include "dds/DdsDcpsTypeSupportExtC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO MissionData_Export

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace MissionData
{

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

  typedef ::TAO::DCPS::ZeroCopyDataSeq< MissionData::MissionPlan, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> MissionPlanSeq;
  

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MISSIONDATA_MISSIONPLANTYPESUPPORT__VAR_OUT_CH_)
#define _MISSIONDATA_MISSIONPLANTYPESUPPORT__VAR_OUT_CH_

  class MissionPlanTypeSupport;
  typedef MissionPlanTypeSupport *MissionPlanTypeSupport_ptr;

  typedef
    TAO_Objref_Var_T<
        MissionPlanTypeSupport
      >
    MissionPlanTypeSupport_var;
  
  typedef
    TAO_Objref_Out_T<
        MissionPlanTypeSupport
      >
    MissionPlanTypeSupport_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class MissionData_Export MissionPlanTypeSupport
    : public virtual ::OpenDDS::DCPS::TypeSupport
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef MissionPlanTypeSupport_ptr _ptr_type;
    typedef MissionPlanTypeSupport_var _var_type;
    typedef MissionPlanTypeSupport_out _out_type;

    // The static operations.
    static MissionPlanTypeSupport_ptr _duplicate (MissionPlanTypeSupport_ptr obj);

    static void _tao_release (MissionPlanTypeSupport_ptr obj);

    static MissionPlanTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
    static MissionPlanTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static MissionPlanTypeSupport_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    MissionPlanTypeSupport (void);

    

    virtual ~MissionPlanTypeSupport (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    MissionPlanTypeSupport (const MissionPlanTypeSupport &);

    void operator= (const MissionPlanTypeSupport &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MISSIONDATA_MISSIONPLANDATAWRITER__VAR_OUT_CH_)
#define _MISSIONDATA_MISSIONPLANDATAWRITER__VAR_OUT_CH_

  class MissionPlanDataWriter;
  typedef MissionPlanDataWriter *MissionPlanDataWriter_ptr;

  typedef
    TAO_Objref_Var_T<
        MissionPlanDataWriter
      >
    MissionPlanDataWriter_var;
  
  typedef
    TAO_Objref_Out_T<
        MissionPlanDataWriter
      >
    MissionPlanDataWriter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class MissionData_Export MissionPlanDataWriter
    : public virtual ::DDS::DataWriter
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef MissionPlanDataWriter_ptr _ptr_type;
    typedef MissionPlanDataWriter_var _var_type;
    typedef MissionPlanDataWriter_out _out_type;

    // The static operations.
    static MissionPlanDataWriter_ptr _duplicate (MissionPlanDataWriter_ptr obj);

    static void _tao_release (MissionPlanDataWriter_ptr obj);

    static MissionPlanDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
    static MissionPlanDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static MissionPlanDataWriter_ptr _nil (void);

    virtual ::DDS::InstanceHandle_t register_instance (
      const ::MissionData::MissionPlan & instance) = 0;

    virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
      const ::MissionData::MissionPlan & instance,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance (
      const ::MissionData::MissionPlan & instance,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
      const ::MissionData::MissionPlan & instance,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t write (
      const ::MissionData::MissionPlan & instance_data,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t write_w_timestamp (
      const ::MissionData::MissionPlan & instance_data,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t dispose (
      const ::MissionData::MissionPlan & instance_data,
      ::DDS::InstanceHandle_t instance_handle) = 0;

    virtual ::DDS::ReturnCode_t dispose_w_timestamp (
      const ::MissionData::MissionPlan & instance_data,
      ::DDS::InstanceHandle_t instance_handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::MissionData::MissionPlan & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::MissionData::MissionPlan & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    MissionPlanDataWriter (void);

    

    virtual ~MissionPlanDataWriter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    MissionPlanDataWriter (const MissionPlanDataWriter &);

    void operator= (const MissionPlanDataWriter &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MISSIONDATA_MISSIONPLANDATAREADER__VAR_OUT_CH_)
#define _MISSIONDATA_MISSIONPLANDATAREADER__VAR_OUT_CH_

  class MissionPlanDataReader;
  typedef MissionPlanDataReader *MissionPlanDataReader_ptr;

  typedef
    TAO_Objref_Var_T<
        MissionPlanDataReader
      >
    MissionPlanDataReader_var;
  
  typedef
    TAO_Objref_Out_T<
        MissionPlanDataReader
      >
    MissionPlanDataReader_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class MissionData_Export MissionPlanDataReader
    : public virtual ::OpenDDS::DCPS::DataReaderEx
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef MissionPlanDataReader_ptr _ptr_type;
    typedef MissionPlanDataReader_var _var_type;
    typedef MissionPlanDataReader_out _out_type;

    // The static operations.
    static MissionPlanDataReader_ptr _duplicate (MissionPlanDataReader_ptr obj);

    static void _tao_release (MissionPlanDataReader_ptr obj);

    static MissionPlanDataReader_ptr _narrow (::CORBA::Object_ptr obj);
    static MissionPlanDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static MissionPlanDataReader_ptr _nil (void);

    virtual ::DDS::ReturnCode_t read (
      ::MissionData::MissionPlanSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take (
      ::MissionData::MissionPlanSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_w_condition (
      ::MissionData::MissionPlanSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_w_condition (
      ::MissionData::MissionPlanSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_sample (
      ::MissionData::MissionPlan & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t take_next_sample (
      ::MissionData::MissionPlan & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t read_instance (
      ::MissionData::MissionPlanSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_instance (
      ::MissionData::MissionPlanSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_instance_w_condition (
      ::MissionData::MissionPlanSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_instance_w_condition (
      ::MissionData::MissionPlanSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance (
      ::MissionData::MissionPlanSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance (
      ::MissionData::MissionPlanSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
      ::MissionData::MissionPlanSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
      ::MissionData::MissionPlanSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t return_loan (
      ::MissionData::MissionPlanSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::MissionData::MissionPlan & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::MissionData::MissionPlan & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    MissionPlanDataReader (void);

    

    virtual ~MissionPlanDataReader (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    MissionPlanDataReader (const MissionPlanDataReader &);

    void operator= (const MissionPlanDataReader &);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module MissionData

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace MissionData
{

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

  typedef ::TAO::DCPS::ZeroCopyDataSeq< MissionData::NormalizedPoints, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> NormalizedPointsSeq;
  

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MISSIONDATA_NORMALIZEDPOINTSTYPESUPPORT__VAR_OUT_CH_)
#define _MISSIONDATA_NORMALIZEDPOINTSTYPESUPPORT__VAR_OUT_CH_

  class NormalizedPointsTypeSupport;
  typedef NormalizedPointsTypeSupport *NormalizedPointsTypeSupport_ptr;

  typedef
    TAO_Objref_Var_T<
        NormalizedPointsTypeSupport
      >
    NormalizedPointsTypeSupport_var;
  
  typedef
    TAO_Objref_Out_T<
        NormalizedPointsTypeSupport
      >
    NormalizedPointsTypeSupport_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class MissionData_Export NormalizedPointsTypeSupport
    : public virtual ::OpenDDS::DCPS::TypeSupport
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef NormalizedPointsTypeSupport_ptr _ptr_type;
    typedef NormalizedPointsTypeSupport_var _var_type;
    typedef NormalizedPointsTypeSupport_out _out_type;

    // The static operations.
    static NormalizedPointsTypeSupport_ptr _duplicate (NormalizedPointsTypeSupport_ptr obj);

    static void _tao_release (NormalizedPointsTypeSupport_ptr obj);

    static NormalizedPointsTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
    static NormalizedPointsTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static NormalizedPointsTypeSupport_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    NormalizedPointsTypeSupport (void);

    

    virtual ~NormalizedPointsTypeSupport (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    NormalizedPointsTypeSupport (const NormalizedPointsTypeSupport &);

    void operator= (const NormalizedPointsTypeSupport &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MISSIONDATA_NORMALIZEDPOINTSDATAWRITER__VAR_OUT_CH_)
#define _MISSIONDATA_NORMALIZEDPOINTSDATAWRITER__VAR_OUT_CH_

  class NormalizedPointsDataWriter;
  typedef NormalizedPointsDataWriter *NormalizedPointsDataWriter_ptr;

  typedef
    TAO_Objref_Var_T<
        NormalizedPointsDataWriter
      >
    NormalizedPointsDataWriter_var;
  
  typedef
    TAO_Objref_Out_T<
        NormalizedPointsDataWriter
      >
    NormalizedPointsDataWriter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class MissionData_Export NormalizedPointsDataWriter
    : public virtual ::DDS::DataWriter
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef NormalizedPointsDataWriter_ptr _ptr_type;
    typedef NormalizedPointsDataWriter_var _var_type;
    typedef NormalizedPointsDataWriter_out _out_type;

    // The static operations.
    static NormalizedPointsDataWriter_ptr _duplicate (NormalizedPointsDataWriter_ptr obj);

    static void _tao_release (NormalizedPointsDataWriter_ptr obj);

    static NormalizedPointsDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
    static NormalizedPointsDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static NormalizedPointsDataWriter_ptr _nil (void);

    virtual ::DDS::InstanceHandle_t register_instance (
      const ::MissionData::NormalizedPoints & instance) = 0;

    virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
      const ::MissionData::NormalizedPoints & instance,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance (
      const ::MissionData::NormalizedPoints & instance,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
      const ::MissionData::NormalizedPoints & instance,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t write (
      const ::MissionData::NormalizedPoints & instance_data,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t write_w_timestamp (
      const ::MissionData::NormalizedPoints & instance_data,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t dispose (
      const ::MissionData::NormalizedPoints & instance_data,
      ::DDS::InstanceHandle_t instance_handle) = 0;

    virtual ::DDS::ReturnCode_t dispose_w_timestamp (
      const ::MissionData::NormalizedPoints & instance_data,
      ::DDS::InstanceHandle_t instance_handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::MissionData::NormalizedPoints & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::MissionData::NormalizedPoints & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    NormalizedPointsDataWriter (void);

    

    virtual ~NormalizedPointsDataWriter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    NormalizedPointsDataWriter (const NormalizedPointsDataWriter &);

    void operator= (const NormalizedPointsDataWriter &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MISSIONDATA_NORMALIZEDPOINTSDATAREADER__VAR_OUT_CH_)
#define _MISSIONDATA_NORMALIZEDPOINTSDATAREADER__VAR_OUT_CH_

  class NormalizedPointsDataReader;
  typedef NormalizedPointsDataReader *NormalizedPointsDataReader_ptr;

  typedef
    TAO_Objref_Var_T<
        NormalizedPointsDataReader
      >
    NormalizedPointsDataReader_var;
  
  typedef
    TAO_Objref_Out_T<
        NormalizedPointsDataReader
      >
    NormalizedPointsDataReader_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class MissionData_Export NormalizedPointsDataReader
    : public virtual ::OpenDDS::DCPS::DataReaderEx
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef NormalizedPointsDataReader_ptr _ptr_type;
    typedef NormalizedPointsDataReader_var _var_type;
    typedef NormalizedPointsDataReader_out _out_type;

    // The static operations.
    static NormalizedPointsDataReader_ptr _duplicate (NormalizedPointsDataReader_ptr obj);

    static void _tao_release (NormalizedPointsDataReader_ptr obj);

    static NormalizedPointsDataReader_ptr _narrow (::CORBA::Object_ptr obj);
    static NormalizedPointsDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static NormalizedPointsDataReader_ptr _nil (void);

    virtual ::DDS::ReturnCode_t read (
      ::MissionData::NormalizedPointsSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take (
      ::MissionData::NormalizedPointsSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_w_condition (
      ::MissionData::NormalizedPointsSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_w_condition (
      ::MissionData::NormalizedPointsSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_sample (
      ::MissionData::NormalizedPoints & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t take_next_sample (
      ::MissionData::NormalizedPoints & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t read_instance (
      ::MissionData::NormalizedPointsSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_instance (
      ::MissionData::NormalizedPointsSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_instance_w_condition (
      ::MissionData::NormalizedPointsSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_instance_w_condition (
      ::MissionData::NormalizedPointsSeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance (
      ::MissionData::NormalizedPointsSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance (
      ::MissionData::NormalizedPointsSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
      ::MissionData::NormalizedPointsSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
      ::MissionData::NormalizedPointsSeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t return_loan (
      ::MissionData::NormalizedPointsSeq & received_data,
      ::DDS::SampleInfoSeq & info_seq) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::MissionData::NormalizedPoints & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::MissionData::NormalizedPoints & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    NormalizedPointsDataReader (void);

    

    virtual ~NormalizedPointsDataReader (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    NormalizedPointsDataReader (const NormalizedPointsDataReader &);

    void operator= (const NormalizedPointsDataReader &);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module MissionData

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace MissionData
{

  // TAO_IDL - Generated from
  // be/be_visitor_sequence/sequence_ch.cpp:102

  typedef ::TAO::DCPS::ZeroCopyDataSeq< MissionData::Telemetry, DCPS_ZERO_COPY_SEQ_DEFAULT_SIZE> TelemetrySeq;
  

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MISSIONDATA_TELEMETRYTYPESUPPORT__VAR_OUT_CH_)
#define _MISSIONDATA_TELEMETRYTYPESUPPORT__VAR_OUT_CH_

  class TelemetryTypeSupport;
  typedef TelemetryTypeSupport *TelemetryTypeSupport_ptr;

  typedef
    TAO_Objref_Var_T<
        TelemetryTypeSupport
      >
    TelemetryTypeSupport_var;
  
  typedef
    TAO_Objref_Out_T<
        TelemetryTypeSupport
      >
    TelemetryTypeSupport_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class MissionData_Export TelemetryTypeSupport
    : public virtual ::OpenDDS::DCPS::TypeSupport
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef TelemetryTypeSupport_ptr _ptr_type;
    typedef TelemetryTypeSupport_var _var_type;
    typedef TelemetryTypeSupport_out _out_type;

    // The static operations.
    static TelemetryTypeSupport_ptr _duplicate (TelemetryTypeSupport_ptr obj);

    static void _tao_release (TelemetryTypeSupport_ptr obj);

    static TelemetryTypeSupport_ptr _narrow (::CORBA::Object_ptr obj);
    static TelemetryTypeSupport_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TelemetryTypeSupport_ptr _nil (void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    TelemetryTypeSupport (void);

    

    virtual ~TelemetryTypeSupport (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    TelemetryTypeSupport (const TelemetryTypeSupport &);

    void operator= (const TelemetryTypeSupport &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MISSIONDATA_TELEMETRYDATAWRITER__VAR_OUT_CH_)
#define _MISSIONDATA_TELEMETRYDATAWRITER__VAR_OUT_CH_

  class TelemetryDataWriter;
  typedef TelemetryDataWriter *TelemetryDataWriter_ptr;

  typedef
    TAO_Objref_Var_T<
        TelemetryDataWriter
      >
    TelemetryDataWriter_var;
  
  typedef
    TAO_Objref_Out_T<
        TelemetryDataWriter
      >
    TelemetryDataWriter_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class MissionData_Export TelemetryDataWriter
    : public virtual ::DDS::DataWriter
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef TelemetryDataWriter_ptr _ptr_type;
    typedef TelemetryDataWriter_var _var_type;
    typedef TelemetryDataWriter_out _out_type;

    // The static operations.
    static TelemetryDataWriter_ptr _duplicate (TelemetryDataWriter_ptr obj);

    static void _tao_release (TelemetryDataWriter_ptr obj);

    static TelemetryDataWriter_ptr _narrow (::CORBA::Object_ptr obj);
    static TelemetryDataWriter_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TelemetryDataWriter_ptr _nil (void);

    virtual ::DDS::InstanceHandle_t register_instance (
      const ::MissionData::Telemetry & instance) = 0;

    virtual ::DDS::InstanceHandle_t register_instance_w_timestamp (
      const ::MissionData::Telemetry & instance,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance (
      const ::MissionData::Telemetry & instance,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t unregister_instance_w_timestamp (
      const ::MissionData::Telemetry & instance,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & timestamp) = 0;

    virtual ::DDS::ReturnCode_t write (
      const ::MissionData::Telemetry & instance_data,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::ReturnCode_t write_w_timestamp (
      const ::MissionData::Telemetry & instance_data,
      ::DDS::InstanceHandle_t handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t dispose (
      const ::MissionData::Telemetry & instance_data,
      ::DDS::InstanceHandle_t instance_handle) = 0;

    virtual ::DDS::ReturnCode_t dispose_w_timestamp (
      const ::MissionData::Telemetry & instance_data,
      ::DDS::InstanceHandle_t instance_handle,
      const ::DDS::Time_t & source_timestamp) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::MissionData::Telemetry & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::MissionData::Telemetry & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    TelemetryDataWriter (void);

    

    virtual ~TelemetryDataWriter (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    TelemetryDataWriter (const TelemetryDataWriter &);

    void operator= (const TelemetryDataWriter &);
  };

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_MISSIONDATA_TELEMETRYDATAREADER__VAR_OUT_CH_)
#define _MISSIONDATA_TELEMETRYDATAREADER__VAR_OUT_CH_

  class TelemetryDataReader;
  typedef TelemetryDataReader *TelemetryDataReader_ptr;

  typedef
    TAO_Objref_Var_T<
        TelemetryDataReader
      >
    TelemetryDataReader_var;
  
  typedef
    TAO_Objref_Out_T<
        TelemetryDataReader
      >
    TelemetryDataReader_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class MissionData_Export TelemetryDataReader
    : public virtual ::OpenDDS::DCPS::DataReaderEx
  
  {
  public:

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef TelemetryDataReader_ptr _ptr_type;
    typedef TelemetryDataReader_var _var_type;
    typedef TelemetryDataReader_out _out_type;

    // The static operations.
    static TelemetryDataReader_ptr _duplicate (TelemetryDataReader_ptr obj);

    static void _tao_release (TelemetryDataReader_ptr obj);

    static TelemetryDataReader_ptr _narrow (::CORBA::Object_ptr obj);
    static TelemetryDataReader_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static TelemetryDataReader_ptr _nil (void);

    virtual ::DDS::ReturnCode_t read (
      ::MissionData::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take (
      ::MissionData::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_w_condition (
      ::MissionData::TelemetrySeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_w_condition (
      ::MissionData::TelemetrySeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_sample (
      ::MissionData::Telemetry & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t take_next_sample (
      ::MissionData::Telemetry & received_data,
      ::DDS::SampleInfo & sample_info) = 0;

    virtual ::DDS::ReturnCode_t read_instance (
      ::MissionData::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_instance (
      ::MissionData::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_instance_w_condition (
      ::MissionData::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_instance_w_condition (
      ::MissionData::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance (
      ::MissionData::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance (
      ::MissionData::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t a_handle,
      ::DDS::SampleStateMask sample_states,
      ::DDS::ViewStateMask view_states,
      ::DDS::InstanceStateMask instance_states) = 0;

    virtual ::DDS::ReturnCode_t read_next_instance_w_condition (
      ::MissionData::TelemetrySeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t take_next_instance_w_condition (
      ::MissionData::TelemetrySeq & data_values,
      ::DDS::SampleInfoSeq & sample_infos,
      ::CORBA::Long max_samples,
      ::DDS::InstanceHandle_t previous_handle,
      ::DDS::ReadCondition_ptr a_condition) = 0;

    virtual ::DDS::ReturnCode_t return_loan (
      ::MissionData::TelemetrySeq & received_data,
      ::DDS::SampleInfoSeq & info_seq) = 0;

    virtual ::DDS::ReturnCode_t get_key_value (
      ::MissionData::Telemetry & key_holder,
      ::DDS::InstanceHandle_t handle) = 0;

    virtual ::DDS::InstanceHandle_t lookup_instance (
      const ::MissionData::Telemetry & instance_data) = 0;

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Abstract or local interface only.
    TelemetryDataReader (void);

    

    virtual ~TelemetryDataReader (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    TelemetryDataReader (const TelemetryDataReader &);

    void operator= (const TelemetryDataReader &);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module MissionData

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_MISSIONDATA_MISSIONPLANTYPESUPPORT__TRAITS_)
#define _MISSIONDATA_MISSIONPLANTYPESUPPORT__TRAITS_

  template<>
  struct MissionData_Export Objref_Traits< ::MissionData::MissionPlanTypeSupport>
  {
    static ::MissionData::MissionPlanTypeSupport_ptr duplicate (
        ::MissionData::MissionPlanTypeSupport_ptr p);
    static void release (
        ::MissionData::MissionPlanTypeSupport_ptr p);
    static ::MissionData::MissionPlanTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MissionData::MissionPlanTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MISSIONDATA_MISSIONPLANDATAWRITER__TRAITS_)
#define _MISSIONDATA_MISSIONPLANDATAWRITER__TRAITS_

  template<>
  struct MissionData_Export Objref_Traits< ::MissionData::MissionPlanDataWriter>
  {
    static ::MissionData::MissionPlanDataWriter_ptr duplicate (
        ::MissionData::MissionPlanDataWriter_ptr p);
    static void release (
        ::MissionData::MissionPlanDataWriter_ptr p);
    static ::MissionData::MissionPlanDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MissionData::MissionPlanDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MISSIONDATA_MISSIONPLANDATAREADER__TRAITS_)
#define _MISSIONDATA_MISSIONPLANDATAREADER__TRAITS_

  template<>
  struct MissionData_Export Objref_Traits< ::MissionData::MissionPlanDataReader>
  {
    static ::MissionData::MissionPlanDataReader_ptr duplicate (
        ::MissionData::MissionPlanDataReader_ptr p);
    static void release (
        ::MissionData::MissionPlanDataReader_ptr p);
    static ::MissionData::MissionPlanDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MissionData::MissionPlanDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MISSIONDATA_NORMALIZEDPOINTSTYPESUPPORT__TRAITS_)
#define _MISSIONDATA_NORMALIZEDPOINTSTYPESUPPORT__TRAITS_

  template<>
  struct MissionData_Export Objref_Traits< ::MissionData::NormalizedPointsTypeSupport>
  {
    static ::MissionData::NormalizedPointsTypeSupport_ptr duplicate (
        ::MissionData::NormalizedPointsTypeSupport_ptr p);
    static void release (
        ::MissionData::NormalizedPointsTypeSupport_ptr p);
    static ::MissionData::NormalizedPointsTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MissionData::NormalizedPointsTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MISSIONDATA_NORMALIZEDPOINTSDATAWRITER__TRAITS_)
#define _MISSIONDATA_NORMALIZEDPOINTSDATAWRITER__TRAITS_

  template<>
  struct MissionData_Export Objref_Traits< ::MissionData::NormalizedPointsDataWriter>
  {
    static ::MissionData::NormalizedPointsDataWriter_ptr duplicate (
        ::MissionData::NormalizedPointsDataWriter_ptr p);
    static void release (
        ::MissionData::NormalizedPointsDataWriter_ptr p);
    static ::MissionData::NormalizedPointsDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MissionData::NormalizedPointsDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MISSIONDATA_NORMALIZEDPOINTSDATAREADER__TRAITS_)
#define _MISSIONDATA_NORMALIZEDPOINTSDATAREADER__TRAITS_

  template<>
  struct MissionData_Export Objref_Traits< ::MissionData::NormalizedPointsDataReader>
  {
    static ::MissionData::NormalizedPointsDataReader_ptr duplicate (
        ::MissionData::NormalizedPointsDataReader_ptr p);
    static void release (
        ::MissionData::NormalizedPointsDataReader_ptr p);
    static ::MissionData::NormalizedPointsDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MissionData::NormalizedPointsDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MISSIONDATA_TELEMETRYTYPESUPPORT__TRAITS_)
#define _MISSIONDATA_TELEMETRYTYPESUPPORT__TRAITS_

  template<>
  struct MissionData_Export Objref_Traits< ::MissionData::TelemetryTypeSupport>
  {
    static ::MissionData::TelemetryTypeSupport_ptr duplicate (
        ::MissionData::TelemetryTypeSupport_ptr p);
    static void release (
        ::MissionData::TelemetryTypeSupport_ptr p);
    static ::MissionData::TelemetryTypeSupport_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MissionData::TelemetryTypeSupport_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MISSIONDATA_TELEMETRYDATAWRITER__TRAITS_)
#define _MISSIONDATA_TELEMETRYDATAWRITER__TRAITS_

  template<>
  struct MissionData_Export Objref_Traits< ::MissionData::TelemetryDataWriter>
  {
    static ::MissionData::TelemetryDataWriter_ptr duplicate (
        ::MissionData::TelemetryDataWriter_ptr p);
    static void release (
        ::MissionData::TelemetryDataWriter_ptr p);
    static ::MissionData::TelemetryDataWriter_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MissionData::TelemetryDataWriter_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_MISSIONDATA_TELEMETRYDATAREADER__TRAITS_)
#define _MISSIONDATA_TELEMETRYDATAREADER__TRAITS_

  template<>
  struct MissionData_Export Objref_Traits< ::MissionData::TelemetryDataReader>
  {
    static ::MissionData::TelemetryDataReader_ptr duplicate (
        ::MissionData::TelemetryDataReader_ptr p);
    static void release (
        ::MissionData::TelemetryDataReader_ptr p);
    static ::MissionData::TelemetryDataReader_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::MissionData::TelemetryDataReader_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "MissionDataTypeSupportC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

