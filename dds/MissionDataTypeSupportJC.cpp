#include "MissionDataTypeSupportJC.h"
#include "idl2jni_runtime.h"

/* Generated by /Users/chidiebereonyedinma/Documents/DDS/OpenDDS-3.13.3/bin/idl2jni running on input file MissionDataTypeSupport.idl */


/* Begin MODULE: MissionData */



/* Begin TYPEDEF: MissionPlanSeq */

void copyToCxx (JNIEnv *jni, MissionData::MissionPlanSeq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const MissionData::MissionPlanSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "MissionData/MissionPlan");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      MissionData::MissionPlan var = source[i];
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: MissionPlanSeq */


/* Begin INTERFACE: MissionPlanTypeSupport */

void copyToCxx (JNIEnv *jni, MissionData::MissionPlanTypeSupport_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = MissionData::MissionPlanTypeSupport::_unchecked_narrow (c);
    }
  else
    {
      target = new MissionData_MissionPlanTypeSupportJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const MissionData::MissionPlanTypeSupport_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "MissionData/_MissionPlanTypeSupportTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData_MissionPlanTypeSupportHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  MissionData::MissionPlanTypeSupport_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanTypeSupportTAOPeer_create_1datawriter (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanTypeSupport_var _this = MissionData::MissionPlanTypeSupport::_narrow (_this_obj);
      DDS::DataWriter_var _c_ret = _this->create_datawriter ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanTypeSupportTAOPeer_create_1datareader (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanTypeSupport_var _this = MissionData::MissionPlanTypeSupport::_narrow (_this_obj);
      DDS::DataReader_var _c_ret = _this->create_datareader ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanTypeSupportTAOPeer_create_1multitopic_1datareader (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanTypeSupport_var _this = MissionData::MissionPlanTypeSupport::_narrow (_this_obj);
      DDS::DataReader_var _c_ret = _this->create_multitopic_datareader ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_MissionData__1MissionPlanTypeSupportTAOPeer_has_1dcps_1key (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanTypeSupport_var _this = MissionData::MissionPlanTypeSupport::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->has_dcps_key ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanTypeSupportTAOPeer_unregister_1type (JNIEnv *_jni, jobject _jthis, jobject domain, jobject type_name)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanTypeSupport_var _this = MissionData::MissionPlanTypeSupport::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_domain;
      copyToCxx (_jni, _c_domain, domain);
      CORBA::String_var _c_type_name;
      copyToCxx (_jni, _c_type_name, type_name);
      DDS::ReturnCode_t _c_ret = _this->unregister_type (_c_domain.in (), _c_type_name.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanTypeSupportTAOPeer_register_1type (JNIEnv *_jni, jobject _jthis, jobject domain, jobject type_name)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanTypeSupport_var _this = MissionData::MissionPlanTypeSupport::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_domain;
      copyToCxx (_jni, _c_domain, domain);
      CORBA::String_var _c_type_name;
      copyToCxx (_jni, _c_type_name, type_name);
      DDS::ReturnCode_t _c_ret = _this->register_type (_c_domain.in (), _c_type_name.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanTypeSupportTAOPeer_get_1type_1name (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanTypeSupport_var _this = MissionData::MissionPlanTypeSupport::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_type_name ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: MissionPlanTypeSupport */


/* Begin INTERFACE: MissionPlanDataWriter */

void copyToCxx (JNIEnv *jni, MissionData::MissionPlanDataWriter_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = MissionData::MissionPlanDataWriter::_unchecked_narrow (c);
    }
  else
    {
      target = new MissionData_MissionPlanDataWriterJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const MissionData::MissionPlanDataWriter_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "MissionData/_MissionPlanDataWriterTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData_MissionPlanDataWriterHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  MissionData::MissionPlanDataWriter_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::InstanceHandle_t MissionData_MissionPlanDataWriterJavaPeer::register_instance (const MissionData::MissionPlan& instance)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance = 0;
  copyToJava (_jni, _j_instance, instance, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "register_instance", "(LMissionData/MissionPlan;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_register_1instance (JNIEnv *_jni, jobject _jthis, jobject instance)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      MissionData::MissionPlan _c_instance;
      copyToCxx (_jni, _c_instance, instance);
      DDS::InstanceHandle_t _c_ret = _this->register_instance (_c_instance);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::InstanceHandle_t MissionData_MissionPlanDataWriterJavaPeer::register_instance_w_timestamp (const MissionData::MissionPlan& instance, const DDS::Time_t& timestamp)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance = 0;
  copyToJava (_jni, _j_instance, instance, true);
  jobject _j_timestamp = 0;
  copyToJava (_jni, _j_timestamp, timestamp, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "register_instance_w_timestamp", "(LMissionData/MissionPlan;LDDS/Time_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance, _j_timestamp);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_register_1instance_1w_1timestamp (JNIEnv *_jni, jobject _jthis, jobject instance, jobject timestamp)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      MissionData::MissionPlan _c_instance;
      copyToCxx (_jni, _c_instance, instance);
      DDS::Time_t _c_timestamp;
      copyToCxx (_jni, _c_timestamp, timestamp);
      DDS::InstanceHandle_t _c_ret = _this->register_instance_w_timestamp (_c_instance, _c_timestamp);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataWriterJavaPeer::unregister_instance (const MissionData::MissionPlan& instance, DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance = 0;
  copyToJava (_jni, _j_instance, instance, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "unregister_instance", "(LMissionData/MissionPlan;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_unregister_1instance (JNIEnv *_jni, jobject _jthis, jobject instance, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      MissionData::MissionPlan _c_instance;
      copyToCxx (_jni, _c_instance, instance);
      DDS::ReturnCode_t _c_ret = _this->unregister_instance (_c_instance, handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataWriterJavaPeer::unregister_instance_w_timestamp (const MissionData::MissionPlan& instance, DDS::InstanceHandle_t handle, const DDS::Time_t& timestamp)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance = 0;
  copyToJava (_jni, _j_instance, instance, true);
  jobject _j_timestamp = 0;
  copyToJava (_jni, _j_timestamp, timestamp, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "unregister_instance_w_timestamp", "(LMissionData/MissionPlan;ILDDS/Time_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance, handle, _j_timestamp);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_unregister_1instance_1w_1timestamp (JNIEnv *_jni, jobject _jthis, jobject instance, jint handle, jobject timestamp)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      MissionData::MissionPlan _c_instance;
      copyToCxx (_jni, _c_instance, instance);
      DDS::Time_t _c_timestamp;
      copyToCxx (_jni, _c_timestamp, timestamp);
      DDS::ReturnCode_t _c_ret = _this->unregister_instance_w_timestamp (_c_instance, handle, _c_timestamp);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataWriterJavaPeer::write (const MissionData::MissionPlan& instance_data, DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "write", "(LMissionData/MissionPlan;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_write (JNIEnv *_jni, jobject _jthis, jobject instance_data, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      MissionData::MissionPlan _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::ReturnCode_t _c_ret = _this->write (_c_instance_data, handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataWriterJavaPeer::write_w_timestamp (const MissionData::MissionPlan& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jobject _j_source_timestamp = 0;
  copyToJava (_jni, _j_source_timestamp, source_timestamp, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "write_w_timestamp", "(LMissionData/MissionPlan;ILDDS/Time_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data, handle, _j_source_timestamp);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_write_1w_1timestamp (JNIEnv *_jni, jobject _jthis, jobject instance_data, jint handle, jobject source_timestamp)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      MissionData::MissionPlan _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::Time_t _c_source_timestamp;
      copyToCxx (_jni, _c_source_timestamp, source_timestamp);
      DDS::ReturnCode_t _c_ret = _this->write_w_timestamp (_c_instance_data, handle, _c_source_timestamp);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataWriterJavaPeer::dispose (const MissionData::MissionPlan& instance_data, DDS::InstanceHandle_t instance_handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "dispose", "(LMissionData/MissionPlan;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data, instance_handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_dispose (JNIEnv *_jni, jobject _jthis, jobject instance_data, jint instance_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      MissionData::MissionPlan _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::ReturnCode_t _c_ret = _this->dispose (_c_instance_data, instance_handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataWriterJavaPeer::dispose_w_timestamp (const MissionData::MissionPlan& instance_data, DDS::InstanceHandle_t instance_handle, const DDS::Time_t& source_timestamp)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jobject _j_source_timestamp = 0;
  copyToJava (_jni, _j_source_timestamp, source_timestamp, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "dispose_w_timestamp", "(LMissionData/MissionPlan;ILDDS/Time_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data, instance_handle, _j_source_timestamp);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_dispose_1w_1timestamp (JNIEnv *_jni, jobject _jthis, jobject instance_data, jint instance_handle, jobject source_timestamp)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      MissionData::MissionPlan _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::Time_t _c_source_timestamp;
      copyToCxx (_jni, _c_source_timestamp, source_timestamp);
      DDS::ReturnCode_t _c_ret = _this->dispose_w_timestamp (_c_instance_data, instance_handle, _c_source_timestamp);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataWriterJavaPeer::get_key_value (MissionData::MissionPlan& key_holder, DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_key_holder = 0;
  copyToJava (_jni, _n_key_holder, key_holder, true);
  jclass _hc_key_holder = findClass (_jni, "MissionData/MissionPlanHolder");
  jmethodID _hm_key_holder = _jni->GetMethodID (_hc_key_holder, "<init>", "()V");
  jobject _j_key_holder = _jni->NewObject (_hc_key_holder, _hm_key_holder);
  holderize (_jni, _j_key_holder, _n_key_holder, "LMissionData/MissionPlan;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_key_value", "(LMissionData/MissionPlanHolder;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_key_holder, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_key_holder = deholderize<jobject> (_jni, _j_key_holder, "LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_key_holder);
  copyToCxx (_jni, key_holder, _o_key_holder);
  _jni->DeleteLocalRef (_o_key_holder);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1key_1value (JNIEnv *_jni, jobject _jthis, jobject key_holder, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      jobject _j_key_holder = deholderize<jobject> (_jni, key_holder, "LMissionData/MissionPlan;");
      MissionData::MissionPlan _c_key_holder;
      copyToCxx (_jni, _c_key_holder, _j_key_holder);
      DDS::ReturnCode_t _c_ret = _this->get_key_value (_c_key_holder, handle);
      copyToJava (_jni, _j_key_holder, _c_key_holder);
      holderize (_jni, key_holder, _j_key_holder, "LMissionData/MissionPlan;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::InstanceHandle_t MissionData_MissionPlanDataWriterJavaPeer::lookup_instance (const MissionData::MissionPlan& instance_data)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "lookup_instance", "(LMissionData/MissionPlan;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_lookup_1instance (JNIEnv *_jni, jobject _jthis, jobject instance_data)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      MissionData::MissionPlan _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::InstanceHandle_t _c_ret = _this->lookup_instance (_c_instance_data);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      DDS::DataWriterQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DataWriterQos;");
      DDS::DataWriterQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DataWriterQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_set_1listener (JNIEnv *_jni, jobject _jthis, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      DDS::DataWriterListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::ReturnCode_t _c_ret = _this->set_listener (_c_a_listener.in (), mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1listener (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      DDS::DataWriterListener_var _c_ret = _this->get_listener ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1topic (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      DDS::Topic_var _c_ret = _this->get_topic ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1publisher (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      DDS::Publisher_var _c_ret = _this->get_publisher ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_wait_1for_1acknowledgments (JNIEnv *_jni, jobject _jthis, jobject max_wait)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      DDS::Duration_t _c_max_wait;
      copyToCxx (_jni, _c_max_wait, max_wait);
      DDS::ReturnCode_t _c_ret = _this->wait_for_acknowledgments (_c_max_wait);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1liveliness_1lost_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/LivelinessLostStatus;");
      DDS::LivelinessLostStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_liveliness_lost_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/LivelinessLostStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1offered_1deadline_1missed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/OfferedDeadlineMissedStatus;");
      DDS::OfferedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_offered_deadline_missed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/OfferedDeadlineMissedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1offered_1incompatible_1qos_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/OfferedIncompatibleQosStatus;");
      DDS::OfferedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_offered_incompatible_qos_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/OfferedIncompatibleQosStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1publication_1matched_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/PublicationMatchedStatus;");
      DDS::PublicationMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_publication_matched_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/PublicationMatchedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_assert_1liveliness (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->assert_liveliness ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1matched_1subscriptions (JNIEnv *_jni, jobject _jthis, jobject subscription_handles)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      jintArray _j_subscription_handles = deholderize<jintArray> (_jni, subscription_handles, "[I");
      DDS::InstanceHandleSeq _c_subscription_handles;
      copyToCxx (_jni, _c_subscription_handles, _j_subscription_handles);
      DDS::ReturnCode_t _c_ret = _this->get_matched_subscriptions (_c_subscription_handles);
      copyToJava (_jni, _j_subscription_handles, _c_subscription_handles);
      holderize (_jni, subscription_handles, _j_subscription_handles, "[I");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1matched_1subscription_1data (JNIEnv *_jni, jobject _jthis, jobject subscription_data, jint subscription_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      jobject _j_subscription_data = deholderize<jobject> (_jni, subscription_data, "LDDS/SubscriptionBuiltinTopicData;");
      DDS::SubscriptionBuiltinTopicData _c_subscription_data;
      copyToCxx (_jni, _c_subscription_data, _j_subscription_data);
      DDS::ReturnCode_t _c_ret = _this->get_matched_subscription_data (_c_subscription_data, subscription_handle);
      copyToJava (_jni, _j_subscription_data, _c_subscription_data);
      holderize (_jni, subscription_data, _j_subscription_data, "LDDS/SubscriptionBuiltinTopicData;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataWriterTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataWriter_var _this = MissionData::MissionPlanDataWriter::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: MissionPlanDataWriter */


/* Begin INTERFACE: MissionPlanDataReader */

void copyToCxx (JNIEnv *jni, MissionData::MissionPlanDataReader_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = MissionData::MissionPlanDataReader::_unchecked_narrow (c);
    }
  else
    {
      target = new MissionData_MissionPlanDataReaderJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const MissionData::MissionPlanDataReader_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "MissionData/_MissionPlanDataReaderTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData_MissionPlanDataReaderHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  MissionData::MissionPlanDataReader_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::read (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/MissionPlanSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/MissionPlan;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read", "(LMissionData/MissionPlanSeqHolder;LDDS/SampleInfoSeqHolder;IIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_read (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/MissionPlan;");
      MissionData::MissionPlanSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->read (_c_received_data, _c_info_seq, max_samples, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/MissionPlan;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::take (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/MissionPlanSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/MissionPlan;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take", "(LMissionData/MissionPlanSeqHolder;LDDS/SampleInfoSeqHolder;IIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_take (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/MissionPlan;");
      MissionData::MissionPlanSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->take (_c_received_data, _c_info_seq, max_samples, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/MissionPlan;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::read_w_condition (MissionData::MissionPlanSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_data_values = 0;
  copyToJava (_jni, _n_data_values, data_values, true);
  jclass _hc_data_values = findClass (_jni, "MissionData/MissionPlanSeqHolder");
  jmethodID _hm_data_values = _jni->GetMethodID (_hc_data_values, "<init>", "()V");
  jobject _j_data_values = _jni->NewObject (_hc_data_values, _hm_data_values);
  holderize (_jni, _j_data_values, _n_data_values, "[LMissionData/MissionPlan;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_w_condition", "(LMissionData/MissionPlanSeqHolder;LDDS/SampleInfoSeqHolder;ILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_data_values, _j_sample_infos, max_samples, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_data_values = deholderize<jobjectArray> (_jni, _j_data_values, "[LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_data_values);
  copyToCxx (_jni, data_values, _o_data_values);
  _jni->DeleteLocalRef (_o_data_values);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_read_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject data_values, jobject sample_infos, jint max_samples, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_data_values = deholderize<jobjectArray> (_jni, data_values, "[LMissionData/MissionPlan;");
      MissionData::MissionPlanSeq _c_data_values;
      copyToCxx (_jni, _c_data_values, _j_data_values);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->read_w_condition (_c_data_values, _c_sample_infos, max_samples, _c_a_condition.in ());
      copyToJava (_jni, _j_data_values, _c_data_values);
      holderize (_jni, data_values, _j_data_values, "[LMissionData/MissionPlan;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::take_w_condition (MissionData::MissionPlanSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_data_values = 0;
  copyToJava (_jni, _n_data_values, data_values, true);
  jclass _hc_data_values = findClass (_jni, "MissionData/MissionPlanSeqHolder");
  jmethodID _hm_data_values = _jni->GetMethodID (_hc_data_values, "<init>", "()V");
  jobject _j_data_values = _jni->NewObject (_hc_data_values, _hm_data_values);
  holderize (_jni, _j_data_values, _n_data_values, "[LMissionData/MissionPlan;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_w_condition", "(LMissionData/MissionPlanSeqHolder;LDDS/SampleInfoSeqHolder;ILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_data_values, _j_sample_infos, max_samples, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_data_values = deholderize<jobjectArray> (_jni, _j_data_values, "[LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_data_values);
  copyToCxx (_jni, data_values, _o_data_values);
  _jni->DeleteLocalRef (_o_data_values);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_take_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject data_values, jobject sample_infos, jint max_samples, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_data_values = deholderize<jobjectArray> (_jni, data_values, "[LMissionData/MissionPlan;");
      MissionData::MissionPlanSeq _c_data_values;
      copyToCxx (_jni, _c_data_values, _j_data_values);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->take_w_condition (_c_data_values, _c_sample_infos, max_samples, _c_a_condition.in ());
      copyToJava (_jni, _j_data_values, _c_data_values);
      holderize (_jni, data_values, _j_data_values, "[LMissionData/MissionPlan;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::read_next_sample (MissionData::MissionPlan& received_data, DDS::SampleInfo& sample_info)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/MissionPlanHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "LMissionData/MissionPlan;");
  jobject _n_sample_info = 0;
  copyToJava (_jni, _n_sample_info, sample_info, true);
  jclass _hc_sample_info = findClass (_jni, "DDS/SampleInfoHolder");
  jmethodID _hm_sample_info = _jni->GetMethodID (_hc_sample_info, "<init>", "()V");
  jobject _j_sample_info = _jni->NewObject (_hc_sample_info, _hm_sample_info);
  holderize (_jni, _j_sample_info, _n_sample_info, "LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_next_sample", "(LMissionData/MissionPlanHolder;LDDS/SampleInfoHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_sample_info);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_received_data = deholderize<jobject> (_jni, _j_received_data, "LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobject _o_sample_info = deholderize<jobject> (_jni, _j_sample_info, "LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_info);
  copyToCxx (_jni, sample_info, _o_sample_info);
  _jni->DeleteLocalRef (_o_sample_info);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_read_1next_1sample (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject sample_info)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobject _j_received_data = deholderize<jobject> (_jni, received_data, "LMissionData/MissionPlan;");
      MissionData::MissionPlan _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobject _j_sample_info = deholderize<jobject> (_jni, sample_info, "LDDS/SampleInfo;");
      DDS::SampleInfo _c_sample_info;
      copyToCxx (_jni, _c_sample_info, _j_sample_info);
      DDS::ReturnCode_t _c_ret = _this->read_next_sample (_c_received_data, _c_sample_info);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "LMissionData/MissionPlan;");
      copyToJava (_jni, _j_sample_info, _c_sample_info);
      holderize (_jni, sample_info, _j_sample_info, "LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::take_next_sample (MissionData::MissionPlan& received_data, DDS::SampleInfo& sample_info)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/MissionPlanHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "LMissionData/MissionPlan;");
  jobject _n_sample_info = 0;
  copyToJava (_jni, _n_sample_info, sample_info, true);
  jclass _hc_sample_info = findClass (_jni, "DDS/SampleInfoHolder");
  jmethodID _hm_sample_info = _jni->GetMethodID (_hc_sample_info, "<init>", "()V");
  jobject _j_sample_info = _jni->NewObject (_hc_sample_info, _hm_sample_info);
  holderize (_jni, _j_sample_info, _n_sample_info, "LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_next_sample", "(LMissionData/MissionPlanHolder;LDDS/SampleInfoHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_sample_info);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_received_data = deholderize<jobject> (_jni, _j_received_data, "LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobject _o_sample_info = deholderize<jobject> (_jni, _j_sample_info, "LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_info);
  copyToCxx (_jni, sample_info, _o_sample_info);
  _jni->DeleteLocalRef (_o_sample_info);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_take_1next_1sample (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject sample_info)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobject _j_received_data = deholderize<jobject> (_jni, received_data, "LMissionData/MissionPlan;");
      MissionData::MissionPlan _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobject _j_sample_info = deholderize<jobject> (_jni, sample_info, "LDDS/SampleInfo;");
      DDS::SampleInfo _c_sample_info;
      copyToCxx (_jni, _c_sample_info, _j_sample_info);
      DDS::ReturnCode_t _c_ret = _this->take_next_sample (_c_received_data, _c_sample_info);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "LMissionData/MissionPlan;");
      copyToJava (_jni, _j_sample_info, _c_sample_info);
      holderize (_jni, sample_info, _j_sample_info, "LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::read_instance (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/MissionPlanSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/MissionPlan;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_instance", "(LMissionData/MissionPlanSeqHolder;LDDS/SampleInfoSeqHolder;IIIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_read_1instance (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint a_handle, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/MissionPlan;");
      MissionData::MissionPlanSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->read_instance (_c_received_data, _c_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/MissionPlan;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::take_instance (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/MissionPlanSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/MissionPlan;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_instance", "(LMissionData/MissionPlanSeqHolder;LDDS/SampleInfoSeqHolder;IIIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_take_1instance (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint a_handle, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/MissionPlan;");
      MissionData::MissionPlanSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->take_instance (_c_received_data, _c_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/MissionPlan;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::read_instance_w_condition (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/MissionPlanSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/MissionPlan;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_instance_w_condition", "(LMissionData/MissionPlanSeqHolder;LDDS/SampleInfoSeqHolder;IILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_sample_infos, max_samples, a_handle, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_read_1instance_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject sample_infos, jint max_samples, jint a_handle, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/MissionPlan;");
      MissionData::MissionPlanSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->read_instance_w_condition (_c_received_data, _c_sample_infos, max_samples, a_handle, _c_a_condition.in ());
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/MissionPlan;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::take_instance_w_condition (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/MissionPlanSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/MissionPlan;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_instance_w_condition", "(LMissionData/MissionPlanSeqHolder;LDDS/SampleInfoSeqHolder;IILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_sample_infos, max_samples, a_handle, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_take_1instance_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject sample_infos, jint max_samples, jint a_handle, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/MissionPlan;");
      MissionData::MissionPlanSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->take_instance_w_condition (_c_received_data, _c_sample_infos, max_samples, a_handle, _c_a_condition.in ());
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/MissionPlan;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::read_next_instance (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/MissionPlanSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/MissionPlan;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_next_instance", "(LMissionData/MissionPlanSeqHolder;LDDS/SampleInfoSeqHolder;IIIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_read_1next_1instance (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint a_handle, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/MissionPlan;");
      MissionData::MissionPlanSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->read_next_instance (_c_received_data, _c_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/MissionPlan;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::take_next_instance (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/MissionPlanSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/MissionPlan;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_next_instance", "(LMissionData/MissionPlanSeqHolder;LDDS/SampleInfoSeqHolder;IIIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_take_1next_1instance (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint a_handle, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/MissionPlan;");
      MissionData::MissionPlanSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->take_next_instance (_c_received_data, _c_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/MissionPlan;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::read_next_instance_w_condition (MissionData::MissionPlanSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_data_values = 0;
  copyToJava (_jni, _n_data_values, data_values, true);
  jclass _hc_data_values = findClass (_jni, "MissionData/MissionPlanSeqHolder");
  jmethodID _hm_data_values = _jni->GetMethodID (_hc_data_values, "<init>", "()V");
  jobject _j_data_values = _jni->NewObject (_hc_data_values, _hm_data_values);
  holderize (_jni, _j_data_values, _n_data_values, "[LMissionData/MissionPlan;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_next_instance_w_condition", "(LMissionData/MissionPlanSeqHolder;LDDS/SampleInfoSeqHolder;IILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_data_values, _j_sample_infos, max_samples, previous_handle, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_data_values = deholderize<jobjectArray> (_jni, _j_data_values, "[LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_data_values);
  copyToCxx (_jni, data_values, _o_data_values);
  _jni->DeleteLocalRef (_o_data_values);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_read_1next_1instance_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject data_values, jobject sample_infos, jint max_samples, jint previous_handle, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_data_values = deholderize<jobjectArray> (_jni, data_values, "[LMissionData/MissionPlan;");
      MissionData::MissionPlanSeq _c_data_values;
      copyToCxx (_jni, _c_data_values, _j_data_values);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->read_next_instance_w_condition (_c_data_values, _c_sample_infos, max_samples, previous_handle, _c_a_condition.in ());
      copyToJava (_jni, _j_data_values, _c_data_values);
      holderize (_jni, data_values, _j_data_values, "[LMissionData/MissionPlan;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::take_next_instance_w_condition (MissionData::MissionPlanSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_data_values = 0;
  copyToJava (_jni, _n_data_values, data_values, true);
  jclass _hc_data_values = findClass (_jni, "MissionData/MissionPlanSeqHolder");
  jmethodID _hm_data_values = _jni->GetMethodID (_hc_data_values, "<init>", "()V");
  jobject _j_data_values = _jni->NewObject (_hc_data_values, _hm_data_values);
  holderize (_jni, _j_data_values, _n_data_values, "[LMissionData/MissionPlan;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_next_instance_w_condition", "(LMissionData/MissionPlanSeqHolder;LDDS/SampleInfoSeqHolder;IILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_data_values, _j_sample_infos, max_samples, previous_handle, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_data_values = deholderize<jobjectArray> (_jni, _j_data_values, "[LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_data_values);
  copyToCxx (_jni, data_values, _o_data_values);
  _jni->DeleteLocalRef (_o_data_values);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_take_1next_1instance_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject data_values, jobject sample_infos, jint max_samples, jint previous_handle, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_data_values = deholderize<jobjectArray> (_jni, data_values, "[LMissionData/MissionPlan;");
      MissionData::MissionPlanSeq _c_data_values;
      copyToCxx (_jni, _c_data_values, _j_data_values);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->take_next_instance_w_condition (_c_data_values, _c_sample_infos, max_samples, previous_handle, _c_a_condition.in ());
      copyToJava (_jni, _j_data_values, _c_data_values);
      holderize (_jni, data_values, _j_data_values, "[LMissionData/MissionPlan;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::return_loan (MissionData::MissionPlanSeq& received_data, DDS::SampleInfoSeq& info_seq)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/MissionPlanSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/MissionPlan;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "return_loan", "(LMissionData/MissionPlanSeqHolder;LDDS/SampleInfoSeqHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_return_1loan (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/MissionPlan;");
      MissionData::MissionPlanSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->return_loan (_c_received_data, _c_info_seq);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/MissionPlan;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_MissionPlanDataReaderJavaPeer::get_key_value (MissionData::MissionPlan& key_holder, DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_key_holder = 0;
  copyToJava (_jni, _n_key_holder, key_holder, true);
  jclass _hc_key_holder = findClass (_jni, "MissionData/MissionPlanHolder");
  jmethodID _hm_key_holder = _jni->GetMethodID (_hc_key_holder, "<init>", "()V");
  jobject _j_key_holder = _jni->NewObject (_hc_key_holder, _hm_key_holder);
  holderize (_jni, _j_key_holder, _n_key_holder, "LMissionData/MissionPlan;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_key_value", "(LMissionData/MissionPlanHolder;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_key_holder, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_key_holder = deholderize<jobject> (_jni, _j_key_holder, "LMissionData/MissionPlan;");
  _jni->DeleteLocalRef (_j_key_holder);
  copyToCxx (_jni, key_holder, _o_key_holder);
  _jni->DeleteLocalRef (_o_key_holder);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1key_1value (JNIEnv *_jni, jobject _jthis, jobject key_holder, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobject _j_key_holder = deholderize<jobject> (_jni, key_holder, "LMissionData/MissionPlan;");
      MissionData::MissionPlan _c_key_holder;
      copyToCxx (_jni, _c_key_holder, _j_key_holder);
      DDS::ReturnCode_t _c_ret = _this->get_key_value (_c_key_holder, handle);
      copyToJava (_jni, _j_key_holder, _c_key_holder);
      holderize (_jni, key_holder, _j_key_holder, "LMissionData/MissionPlan;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::InstanceHandle_t MissionData_MissionPlanDataReaderJavaPeer::lookup_instance (const MissionData::MissionPlan& instance_data)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "lookup_instance", "(LMissionData/MissionPlan;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_lookup_1instance (JNIEnv *_jni, jobject _jthis, jobject instance_data)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      MissionData::MissionPlan _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::InstanceHandle_t _c_ret = _this->lookup_instance (_c_instance_data);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1latency_1stats (JNIEnv *_jni, jobject _jthis, jobject stats)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobjectArray _j_stats = deholderize<jobjectArray> (_jni, stats, "[LOpenDDS/DCPS/LatencyStatistics;");
      OpenDDS::DCPS::LatencyStatisticsSeq _c_stats;
      copyToCxx (_jni, _c_stats, _j_stats);
      _this->get_latency_stats (_c_stats);
      copyToJava (_jni, _j_stats, _c_stats);
      holderize (_jni, stats, _j_stats, "[LOpenDDS/DCPS/LatencyStatistics;");
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_reset_1latency_1stats (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      _this->reset_latency_stats ();
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT jboolean JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_statistics_1enabled (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->statistics_enabled ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_statistics_1enabled_Z (JNIEnv *_jni, jobject _jthis, jboolean statistics_enabled_)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      _this->statistics_enabled (statistics_enabled_);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_create_1readcondition (JNIEnv *_jni, jobject _jthis, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      DDS::ReadCondition_var _c_ret = _this->create_readcondition (sample_states, view_states, instance_states);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_create_1querycondition (JNIEnv *_jni, jobject _jthis, jint sample_states, jint view_states, jint instance_states, jobject query_expression, jobjectArray query_parameters)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      CORBA::String_var _c_query_expression;
      copyToCxx (_jni, _c_query_expression, query_expression);
      DDS::StringSeq _c_query_parameters;
      copyToCxx (_jni, _c_query_parameters, query_parameters);
      DDS::QueryCondition_var _c_ret = _this->create_querycondition (sample_states, view_states, instance_states, _c_query_expression.in (), _c_query_parameters);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_delete_1readcondition (JNIEnv *_jni, jobject _jthis, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->delete_readcondition (_c_a_condition.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_delete_1contained_1entities (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->delete_contained_entities ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      DDS::DataReaderQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DataReaderQos;");
      DDS::DataReaderQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DataReaderQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_set_1listener (JNIEnv *_jni, jobject _jthis, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      DDS::DataReaderListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::ReturnCode_t _c_ret = _this->set_listener (_c_a_listener.in (), mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1listener (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      DDS::DataReaderListener_var _c_ret = _this->get_listener ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1topicdescription (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      DDS::TopicDescription_var _c_ret = _this->get_topicdescription ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1subscriber (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      DDS::Subscriber_var _c_ret = _this->get_subscriber ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1sample_1rejected_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SampleRejectedStatus;");
      DDS::SampleRejectedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_sample_rejected_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SampleRejectedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1liveliness_1changed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/LivelinessChangedStatus;");
      DDS::LivelinessChangedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_liveliness_changed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/LivelinessChangedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1requested_1deadline_1missed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/RequestedDeadlineMissedStatus;");
      DDS::RequestedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_requested_deadline_missed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/RequestedDeadlineMissedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1requested_1incompatible_1qos_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/RequestedIncompatibleQosStatus;");
      DDS::RequestedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_requested_incompatible_qos_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/RequestedIncompatibleQosStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1subscription_1matched_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SubscriptionMatchedStatus;");
      DDS::SubscriptionMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_subscription_matched_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SubscriptionMatchedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1sample_1lost_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SampleLostStatus;");
      DDS::SampleLostStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_sample_lost_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SampleLostStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_wait_1for_1historical_1data (JNIEnv *_jni, jobject _jthis, jobject max_wait)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      DDS::Duration_t _c_max_wait;
      copyToCxx (_jni, _c_max_wait, max_wait);
      DDS::ReturnCode_t _c_ret = _this->wait_for_historical_data (_c_max_wait);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1matched_1publications (JNIEnv *_jni, jobject _jthis, jobject publication_handles)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jintArray _j_publication_handles = deholderize<jintArray> (_jni, publication_handles, "[I");
      DDS::InstanceHandleSeq _c_publication_handles;
      copyToCxx (_jni, _c_publication_handles, _j_publication_handles);
      DDS::ReturnCode_t _c_ret = _this->get_matched_publications (_c_publication_handles);
      copyToJava (_jni, _j_publication_handles, _c_publication_handles);
      holderize (_jni, publication_handles, _j_publication_handles, "[I");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1matched_1publication_1data (JNIEnv *_jni, jobject _jthis, jobject publication_data, jint publication_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      jobject _j_publication_data = deholderize<jobject> (_jni, publication_data, "LDDS/PublicationBuiltinTopicData;");
      DDS::PublicationBuiltinTopicData _c_publication_data;
      copyToCxx (_jni, _c_publication_data, _j_publication_data);
      DDS::ReturnCode_t _c_ret = _this->get_matched_publication_data (_c_publication_data, publication_handle);
      copyToJava (_jni, _j_publication_data, _c_publication_data);
      holderize (_jni, publication_data, _j_publication_data, "LDDS/PublicationBuiltinTopicData;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1MissionPlanDataReaderTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::MissionPlanDataReader_var _this = MissionData::MissionPlanDataReader::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: MissionPlanDataReader */

/* End MODULE: MissionData */


/* Begin MODULE: MissionData */



/* Begin TYPEDEF: NormalizedPointsSeq */

void copyToCxx (JNIEnv *jni, MissionData::NormalizedPointsSeq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const MissionData::NormalizedPointsSeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "MissionData/NormalizedPoints");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      MissionData::NormalizedPoints var = source[i];
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: NormalizedPointsSeq */


/* Begin INTERFACE: NormalizedPointsTypeSupport */

void copyToCxx (JNIEnv *jni, MissionData::NormalizedPointsTypeSupport_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = MissionData::NormalizedPointsTypeSupport::_unchecked_narrow (c);
    }
  else
    {
      target = new MissionData_NormalizedPointsTypeSupportJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const MissionData::NormalizedPointsTypeSupport_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "MissionData/_NormalizedPointsTypeSupportTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData_NormalizedPointsTypeSupportHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  MissionData::NormalizedPointsTypeSupport_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsTypeSupportTAOPeer_create_1datawriter (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsTypeSupport_var _this = MissionData::NormalizedPointsTypeSupport::_narrow (_this_obj);
      DDS::DataWriter_var _c_ret = _this->create_datawriter ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsTypeSupportTAOPeer_create_1datareader (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsTypeSupport_var _this = MissionData::NormalizedPointsTypeSupport::_narrow (_this_obj);
      DDS::DataReader_var _c_ret = _this->create_datareader ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsTypeSupportTAOPeer_create_1multitopic_1datareader (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsTypeSupport_var _this = MissionData::NormalizedPointsTypeSupport::_narrow (_this_obj);
      DDS::DataReader_var _c_ret = _this->create_multitopic_datareader ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_MissionData__1NormalizedPointsTypeSupportTAOPeer_has_1dcps_1key (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsTypeSupport_var _this = MissionData::NormalizedPointsTypeSupport::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->has_dcps_key ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsTypeSupportTAOPeer_unregister_1type (JNIEnv *_jni, jobject _jthis, jobject domain, jobject type_name)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsTypeSupport_var _this = MissionData::NormalizedPointsTypeSupport::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_domain;
      copyToCxx (_jni, _c_domain, domain);
      CORBA::String_var _c_type_name;
      copyToCxx (_jni, _c_type_name, type_name);
      DDS::ReturnCode_t _c_ret = _this->unregister_type (_c_domain.in (), _c_type_name.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsTypeSupportTAOPeer_register_1type (JNIEnv *_jni, jobject _jthis, jobject domain, jobject type_name)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsTypeSupport_var _this = MissionData::NormalizedPointsTypeSupport::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_domain;
      copyToCxx (_jni, _c_domain, domain);
      CORBA::String_var _c_type_name;
      copyToCxx (_jni, _c_type_name, type_name);
      DDS::ReturnCode_t _c_ret = _this->register_type (_c_domain.in (), _c_type_name.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsTypeSupportTAOPeer_get_1type_1name (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsTypeSupport_var _this = MissionData::NormalizedPointsTypeSupport::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_type_name ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: NormalizedPointsTypeSupport */


/* Begin INTERFACE: NormalizedPointsDataWriter */

void copyToCxx (JNIEnv *jni, MissionData::NormalizedPointsDataWriter_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = MissionData::NormalizedPointsDataWriter::_unchecked_narrow (c);
    }
  else
    {
      target = new MissionData_NormalizedPointsDataWriterJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const MissionData::NormalizedPointsDataWriter_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "MissionData/_NormalizedPointsDataWriterTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData_NormalizedPointsDataWriterHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  MissionData::NormalizedPointsDataWriter_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::InstanceHandle_t MissionData_NormalizedPointsDataWriterJavaPeer::register_instance (const MissionData::NormalizedPoints& instance)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance = 0;
  copyToJava (_jni, _j_instance, instance, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "register_instance", "(LMissionData/NormalizedPoints;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_register_1instance (JNIEnv *_jni, jobject _jthis, jobject instance)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      MissionData::NormalizedPoints _c_instance;
      copyToCxx (_jni, _c_instance, instance);
      DDS::InstanceHandle_t _c_ret = _this->register_instance (_c_instance);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::InstanceHandle_t MissionData_NormalizedPointsDataWriterJavaPeer::register_instance_w_timestamp (const MissionData::NormalizedPoints& instance, const DDS::Time_t& timestamp)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance = 0;
  copyToJava (_jni, _j_instance, instance, true);
  jobject _j_timestamp = 0;
  copyToJava (_jni, _j_timestamp, timestamp, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "register_instance_w_timestamp", "(LMissionData/NormalizedPoints;LDDS/Time_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance, _j_timestamp);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_register_1instance_1w_1timestamp (JNIEnv *_jni, jobject _jthis, jobject instance, jobject timestamp)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      MissionData::NormalizedPoints _c_instance;
      copyToCxx (_jni, _c_instance, instance);
      DDS::Time_t _c_timestamp;
      copyToCxx (_jni, _c_timestamp, timestamp);
      DDS::InstanceHandle_t _c_ret = _this->register_instance_w_timestamp (_c_instance, _c_timestamp);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataWriterJavaPeer::unregister_instance (const MissionData::NormalizedPoints& instance, DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance = 0;
  copyToJava (_jni, _j_instance, instance, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "unregister_instance", "(LMissionData/NormalizedPoints;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_unregister_1instance (JNIEnv *_jni, jobject _jthis, jobject instance, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      MissionData::NormalizedPoints _c_instance;
      copyToCxx (_jni, _c_instance, instance);
      DDS::ReturnCode_t _c_ret = _this->unregister_instance (_c_instance, handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataWriterJavaPeer::unregister_instance_w_timestamp (const MissionData::NormalizedPoints& instance, DDS::InstanceHandle_t handle, const DDS::Time_t& timestamp)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance = 0;
  copyToJava (_jni, _j_instance, instance, true);
  jobject _j_timestamp = 0;
  copyToJava (_jni, _j_timestamp, timestamp, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "unregister_instance_w_timestamp", "(LMissionData/NormalizedPoints;ILDDS/Time_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance, handle, _j_timestamp);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_unregister_1instance_1w_1timestamp (JNIEnv *_jni, jobject _jthis, jobject instance, jint handle, jobject timestamp)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      MissionData::NormalizedPoints _c_instance;
      copyToCxx (_jni, _c_instance, instance);
      DDS::Time_t _c_timestamp;
      copyToCxx (_jni, _c_timestamp, timestamp);
      DDS::ReturnCode_t _c_ret = _this->unregister_instance_w_timestamp (_c_instance, handle, _c_timestamp);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataWriterJavaPeer::write (const MissionData::NormalizedPoints& instance_data, DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "write", "(LMissionData/NormalizedPoints;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_write (JNIEnv *_jni, jobject _jthis, jobject instance_data, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      MissionData::NormalizedPoints _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::ReturnCode_t _c_ret = _this->write (_c_instance_data, handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataWriterJavaPeer::write_w_timestamp (const MissionData::NormalizedPoints& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jobject _j_source_timestamp = 0;
  copyToJava (_jni, _j_source_timestamp, source_timestamp, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "write_w_timestamp", "(LMissionData/NormalizedPoints;ILDDS/Time_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data, handle, _j_source_timestamp);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_write_1w_1timestamp (JNIEnv *_jni, jobject _jthis, jobject instance_data, jint handle, jobject source_timestamp)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      MissionData::NormalizedPoints _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::Time_t _c_source_timestamp;
      copyToCxx (_jni, _c_source_timestamp, source_timestamp);
      DDS::ReturnCode_t _c_ret = _this->write_w_timestamp (_c_instance_data, handle, _c_source_timestamp);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataWriterJavaPeer::dispose (const MissionData::NormalizedPoints& instance_data, DDS::InstanceHandle_t instance_handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "dispose", "(LMissionData/NormalizedPoints;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data, instance_handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_dispose (JNIEnv *_jni, jobject _jthis, jobject instance_data, jint instance_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      MissionData::NormalizedPoints _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::ReturnCode_t _c_ret = _this->dispose (_c_instance_data, instance_handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataWriterJavaPeer::dispose_w_timestamp (const MissionData::NormalizedPoints& instance_data, DDS::InstanceHandle_t instance_handle, const DDS::Time_t& source_timestamp)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jobject _j_source_timestamp = 0;
  copyToJava (_jni, _j_source_timestamp, source_timestamp, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "dispose_w_timestamp", "(LMissionData/NormalizedPoints;ILDDS/Time_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data, instance_handle, _j_source_timestamp);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_dispose_1w_1timestamp (JNIEnv *_jni, jobject _jthis, jobject instance_data, jint instance_handle, jobject source_timestamp)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      MissionData::NormalizedPoints _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::Time_t _c_source_timestamp;
      copyToCxx (_jni, _c_source_timestamp, source_timestamp);
      DDS::ReturnCode_t _c_ret = _this->dispose_w_timestamp (_c_instance_data, instance_handle, _c_source_timestamp);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataWriterJavaPeer::get_key_value (MissionData::NormalizedPoints& key_holder, DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_key_holder = 0;
  copyToJava (_jni, _n_key_holder, key_holder, true);
  jclass _hc_key_holder = findClass (_jni, "MissionData/NormalizedPointsHolder");
  jmethodID _hm_key_holder = _jni->GetMethodID (_hc_key_holder, "<init>", "()V");
  jobject _j_key_holder = _jni->NewObject (_hc_key_holder, _hm_key_holder);
  holderize (_jni, _j_key_holder, _n_key_holder, "LMissionData/NormalizedPoints;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_key_value", "(LMissionData/NormalizedPointsHolder;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_key_holder, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_key_holder = deholderize<jobject> (_jni, _j_key_holder, "LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_key_holder);
  copyToCxx (_jni, key_holder, _o_key_holder);
  _jni->DeleteLocalRef (_o_key_holder);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1key_1value (JNIEnv *_jni, jobject _jthis, jobject key_holder, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      jobject _j_key_holder = deholderize<jobject> (_jni, key_holder, "LMissionData/NormalizedPoints;");
      MissionData::NormalizedPoints _c_key_holder;
      copyToCxx (_jni, _c_key_holder, _j_key_holder);
      DDS::ReturnCode_t _c_ret = _this->get_key_value (_c_key_holder, handle);
      copyToJava (_jni, _j_key_holder, _c_key_holder);
      holderize (_jni, key_holder, _j_key_holder, "LMissionData/NormalizedPoints;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::InstanceHandle_t MissionData_NormalizedPointsDataWriterJavaPeer::lookup_instance (const MissionData::NormalizedPoints& instance_data)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "lookup_instance", "(LMissionData/NormalizedPoints;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_lookup_1instance (JNIEnv *_jni, jobject _jthis, jobject instance_data)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      MissionData::NormalizedPoints _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::InstanceHandle_t _c_ret = _this->lookup_instance (_c_instance_data);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      DDS::DataWriterQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DataWriterQos;");
      DDS::DataWriterQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DataWriterQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_set_1listener (JNIEnv *_jni, jobject _jthis, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      DDS::DataWriterListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::ReturnCode_t _c_ret = _this->set_listener (_c_a_listener.in (), mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1listener (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      DDS::DataWriterListener_var _c_ret = _this->get_listener ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1topic (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      DDS::Topic_var _c_ret = _this->get_topic ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1publisher (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      DDS::Publisher_var _c_ret = _this->get_publisher ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_wait_1for_1acknowledgments (JNIEnv *_jni, jobject _jthis, jobject max_wait)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      DDS::Duration_t _c_max_wait;
      copyToCxx (_jni, _c_max_wait, max_wait);
      DDS::ReturnCode_t _c_ret = _this->wait_for_acknowledgments (_c_max_wait);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1liveliness_1lost_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/LivelinessLostStatus;");
      DDS::LivelinessLostStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_liveliness_lost_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/LivelinessLostStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1offered_1deadline_1missed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/OfferedDeadlineMissedStatus;");
      DDS::OfferedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_offered_deadline_missed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/OfferedDeadlineMissedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1offered_1incompatible_1qos_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/OfferedIncompatibleQosStatus;");
      DDS::OfferedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_offered_incompatible_qos_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/OfferedIncompatibleQosStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1publication_1matched_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/PublicationMatchedStatus;");
      DDS::PublicationMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_publication_matched_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/PublicationMatchedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_assert_1liveliness (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->assert_liveliness ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1matched_1subscriptions (JNIEnv *_jni, jobject _jthis, jobject subscription_handles)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      jintArray _j_subscription_handles = deholderize<jintArray> (_jni, subscription_handles, "[I");
      DDS::InstanceHandleSeq _c_subscription_handles;
      copyToCxx (_jni, _c_subscription_handles, _j_subscription_handles);
      DDS::ReturnCode_t _c_ret = _this->get_matched_subscriptions (_c_subscription_handles);
      copyToJava (_jni, _j_subscription_handles, _c_subscription_handles);
      holderize (_jni, subscription_handles, _j_subscription_handles, "[I");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1matched_1subscription_1data (JNIEnv *_jni, jobject _jthis, jobject subscription_data, jint subscription_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      jobject _j_subscription_data = deholderize<jobject> (_jni, subscription_data, "LDDS/SubscriptionBuiltinTopicData;");
      DDS::SubscriptionBuiltinTopicData _c_subscription_data;
      copyToCxx (_jni, _c_subscription_data, _j_subscription_data);
      DDS::ReturnCode_t _c_ret = _this->get_matched_subscription_data (_c_subscription_data, subscription_handle);
      copyToJava (_jni, _j_subscription_data, _c_subscription_data);
      holderize (_jni, subscription_data, _j_subscription_data, "LDDS/SubscriptionBuiltinTopicData;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataWriterTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataWriter_var _this = MissionData::NormalizedPointsDataWriter::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: NormalizedPointsDataWriter */


/* Begin INTERFACE: NormalizedPointsDataReader */

void copyToCxx (JNIEnv *jni, MissionData::NormalizedPointsDataReader_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = MissionData::NormalizedPointsDataReader::_unchecked_narrow (c);
    }
  else
    {
      target = new MissionData_NormalizedPointsDataReaderJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const MissionData::NormalizedPointsDataReader_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "MissionData/_NormalizedPointsDataReaderTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData_NormalizedPointsDataReaderHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  MissionData::NormalizedPointsDataReader_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::read (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/NormalizedPointsSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/NormalizedPoints;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read", "(LMissionData/NormalizedPointsSeqHolder;LDDS/SampleInfoSeqHolder;IIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_read (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/NormalizedPoints;");
      MissionData::NormalizedPointsSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->read (_c_received_data, _c_info_seq, max_samples, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::take (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/NormalizedPointsSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/NormalizedPoints;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take", "(LMissionData/NormalizedPointsSeqHolder;LDDS/SampleInfoSeqHolder;IIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_take (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/NormalizedPoints;");
      MissionData::NormalizedPointsSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->take (_c_received_data, _c_info_seq, max_samples, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::read_w_condition (MissionData::NormalizedPointsSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_data_values = 0;
  copyToJava (_jni, _n_data_values, data_values, true);
  jclass _hc_data_values = findClass (_jni, "MissionData/NormalizedPointsSeqHolder");
  jmethodID _hm_data_values = _jni->GetMethodID (_hc_data_values, "<init>", "()V");
  jobject _j_data_values = _jni->NewObject (_hc_data_values, _hm_data_values);
  holderize (_jni, _j_data_values, _n_data_values, "[LMissionData/NormalizedPoints;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_w_condition", "(LMissionData/NormalizedPointsSeqHolder;LDDS/SampleInfoSeqHolder;ILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_data_values, _j_sample_infos, max_samples, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_data_values = deholderize<jobjectArray> (_jni, _j_data_values, "[LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_data_values);
  copyToCxx (_jni, data_values, _o_data_values);
  _jni->DeleteLocalRef (_o_data_values);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_read_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject data_values, jobject sample_infos, jint max_samples, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_data_values = deholderize<jobjectArray> (_jni, data_values, "[LMissionData/NormalizedPoints;");
      MissionData::NormalizedPointsSeq _c_data_values;
      copyToCxx (_jni, _c_data_values, _j_data_values);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->read_w_condition (_c_data_values, _c_sample_infos, max_samples, _c_a_condition.in ());
      copyToJava (_jni, _j_data_values, _c_data_values);
      holderize (_jni, data_values, _j_data_values, "[LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::take_w_condition (MissionData::NormalizedPointsSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_data_values = 0;
  copyToJava (_jni, _n_data_values, data_values, true);
  jclass _hc_data_values = findClass (_jni, "MissionData/NormalizedPointsSeqHolder");
  jmethodID _hm_data_values = _jni->GetMethodID (_hc_data_values, "<init>", "()V");
  jobject _j_data_values = _jni->NewObject (_hc_data_values, _hm_data_values);
  holderize (_jni, _j_data_values, _n_data_values, "[LMissionData/NormalizedPoints;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_w_condition", "(LMissionData/NormalizedPointsSeqHolder;LDDS/SampleInfoSeqHolder;ILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_data_values, _j_sample_infos, max_samples, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_data_values = deholderize<jobjectArray> (_jni, _j_data_values, "[LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_data_values);
  copyToCxx (_jni, data_values, _o_data_values);
  _jni->DeleteLocalRef (_o_data_values);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_take_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject data_values, jobject sample_infos, jint max_samples, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_data_values = deholderize<jobjectArray> (_jni, data_values, "[LMissionData/NormalizedPoints;");
      MissionData::NormalizedPointsSeq _c_data_values;
      copyToCxx (_jni, _c_data_values, _j_data_values);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->take_w_condition (_c_data_values, _c_sample_infos, max_samples, _c_a_condition.in ());
      copyToJava (_jni, _j_data_values, _c_data_values);
      holderize (_jni, data_values, _j_data_values, "[LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::read_next_sample (MissionData::NormalizedPoints& received_data, DDS::SampleInfo& sample_info)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/NormalizedPointsHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "LMissionData/NormalizedPoints;");
  jobject _n_sample_info = 0;
  copyToJava (_jni, _n_sample_info, sample_info, true);
  jclass _hc_sample_info = findClass (_jni, "DDS/SampleInfoHolder");
  jmethodID _hm_sample_info = _jni->GetMethodID (_hc_sample_info, "<init>", "()V");
  jobject _j_sample_info = _jni->NewObject (_hc_sample_info, _hm_sample_info);
  holderize (_jni, _j_sample_info, _n_sample_info, "LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_next_sample", "(LMissionData/NormalizedPointsHolder;LDDS/SampleInfoHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_sample_info);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_received_data = deholderize<jobject> (_jni, _j_received_data, "LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobject _o_sample_info = deholderize<jobject> (_jni, _j_sample_info, "LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_info);
  copyToCxx (_jni, sample_info, _o_sample_info);
  _jni->DeleteLocalRef (_o_sample_info);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_read_1next_1sample (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject sample_info)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobject _j_received_data = deholderize<jobject> (_jni, received_data, "LMissionData/NormalizedPoints;");
      MissionData::NormalizedPoints _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobject _j_sample_info = deholderize<jobject> (_jni, sample_info, "LDDS/SampleInfo;");
      DDS::SampleInfo _c_sample_info;
      copyToCxx (_jni, _c_sample_info, _j_sample_info);
      DDS::ReturnCode_t _c_ret = _this->read_next_sample (_c_received_data, _c_sample_info);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_sample_info, _c_sample_info);
      holderize (_jni, sample_info, _j_sample_info, "LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::take_next_sample (MissionData::NormalizedPoints& received_data, DDS::SampleInfo& sample_info)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/NormalizedPointsHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "LMissionData/NormalizedPoints;");
  jobject _n_sample_info = 0;
  copyToJava (_jni, _n_sample_info, sample_info, true);
  jclass _hc_sample_info = findClass (_jni, "DDS/SampleInfoHolder");
  jmethodID _hm_sample_info = _jni->GetMethodID (_hc_sample_info, "<init>", "()V");
  jobject _j_sample_info = _jni->NewObject (_hc_sample_info, _hm_sample_info);
  holderize (_jni, _j_sample_info, _n_sample_info, "LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_next_sample", "(LMissionData/NormalizedPointsHolder;LDDS/SampleInfoHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_sample_info);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_received_data = deholderize<jobject> (_jni, _j_received_data, "LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobject _o_sample_info = deholderize<jobject> (_jni, _j_sample_info, "LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_info);
  copyToCxx (_jni, sample_info, _o_sample_info);
  _jni->DeleteLocalRef (_o_sample_info);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_take_1next_1sample (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject sample_info)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobject _j_received_data = deholderize<jobject> (_jni, received_data, "LMissionData/NormalizedPoints;");
      MissionData::NormalizedPoints _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobject _j_sample_info = deholderize<jobject> (_jni, sample_info, "LDDS/SampleInfo;");
      DDS::SampleInfo _c_sample_info;
      copyToCxx (_jni, _c_sample_info, _j_sample_info);
      DDS::ReturnCode_t _c_ret = _this->take_next_sample (_c_received_data, _c_sample_info);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_sample_info, _c_sample_info);
      holderize (_jni, sample_info, _j_sample_info, "LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::read_instance (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/NormalizedPointsSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/NormalizedPoints;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_instance", "(LMissionData/NormalizedPointsSeqHolder;LDDS/SampleInfoSeqHolder;IIIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_read_1instance (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint a_handle, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/NormalizedPoints;");
      MissionData::NormalizedPointsSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->read_instance (_c_received_data, _c_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::take_instance (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/NormalizedPointsSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/NormalizedPoints;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_instance", "(LMissionData/NormalizedPointsSeqHolder;LDDS/SampleInfoSeqHolder;IIIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_take_1instance (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint a_handle, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/NormalizedPoints;");
      MissionData::NormalizedPointsSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->take_instance (_c_received_data, _c_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::read_instance_w_condition (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/NormalizedPointsSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/NormalizedPoints;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_instance_w_condition", "(LMissionData/NormalizedPointsSeqHolder;LDDS/SampleInfoSeqHolder;IILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_sample_infos, max_samples, a_handle, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_read_1instance_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject sample_infos, jint max_samples, jint a_handle, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/NormalizedPoints;");
      MissionData::NormalizedPointsSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->read_instance_w_condition (_c_received_data, _c_sample_infos, max_samples, a_handle, _c_a_condition.in ());
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::take_instance_w_condition (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/NormalizedPointsSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/NormalizedPoints;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_instance_w_condition", "(LMissionData/NormalizedPointsSeqHolder;LDDS/SampleInfoSeqHolder;IILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_sample_infos, max_samples, a_handle, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_take_1instance_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject sample_infos, jint max_samples, jint a_handle, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/NormalizedPoints;");
      MissionData::NormalizedPointsSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->take_instance_w_condition (_c_received_data, _c_sample_infos, max_samples, a_handle, _c_a_condition.in ());
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::read_next_instance (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/NormalizedPointsSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/NormalizedPoints;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_next_instance", "(LMissionData/NormalizedPointsSeqHolder;LDDS/SampleInfoSeqHolder;IIIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_read_1next_1instance (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint a_handle, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/NormalizedPoints;");
      MissionData::NormalizedPointsSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->read_next_instance (_c_received_data, _c_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::take_next_instance (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/NormalizedPointsSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/NormalizedPoints;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_next_instance", "(LMissionData/NormalizedPointsSeqHolder;LDDS/SampleInfoSeqHolder;IIIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_take_1next_1instance (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint a_handle, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/NormalizedPoints;");
      MissionData::NormalizedPointsSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->take_next_instance (_c_received_data, _c_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::read_next_instance_w_condition (MissionData::NormalizedPointsSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_data_values = 0;
  copyToJava (_jni, _n_data_values, data_values, true);
  jclass _hc_data_values = findClass (_jni, "MissionData/NormalizedPointsSeqHolder");
  jmethodID _hm_data_values = _jni->GetMethodID (_hc_data_values, "<init>", "()V");
  jobject _j_data_values = _jni->NewObject (_hc_data_values, _hm_data_values);
  holderize (_jni, _j_data_values, _n_data_values, "[LMissionData/NormalizedPoints;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_next_instance_w_condition", "(LMissionData/NormalizedPointsSeqHolder;LDDS/SampleInfoSeqHolder;IILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_data_values, _j_sample_infos, max_samples, previous_handle, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_data_values = deholderize<jobjectArray> (_jni, _j_data_values, "[LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_data_values);
  copyToCxx (_jni, data_values, _o_data_values);
  _jni->DeleteLocalRef (_o_data_values);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_read_1next_1instance_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject data_values, jobject sample_infos, jint max_samples, jint previous_handle, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_data_values = deholderize<jobjectArray> (_jni, data_values, "[LMissionData/NormalizedPoints;");
      MissionData::NormalizedPointsSeq _c_data_values;
      copyToCxx (_jni, _c_data_values, _j_data_values);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->read_next_instance_w_condition (_c_data_values, _c_sample_infos, max_samples, previous_handle, _c_a_condition.in ());
      copyToJava (_jni, _j_data_values, _c_data_values);
      holderize (_jni, data_values, _j_data_values, "[LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::take_next_instance_w_condition (MissionData::NormalizedPointsSeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_data_values = 0;
  copyToJava (_jni, _n_data_values, data_values, true);
  jclass _hc_data_values = findClass (_jni, "MissionData/NormalizedPointsSeqHolder");
  jmethodID _hm_data_values = _jni->GetMethodID (_hc_data_values, "<init>", "()V");
  jobject _j_data_values = _jni->NewObject (_hc_data_values, _hm_data_values);
  holderize (_jni, _j_data_values, _n_data_values, "[LMissionData/NormalizedPoints;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_next_instance_w_condition", "(LMissionData/NormalizedPointsSeqHolder;LDDS/SampleInfoSeqHolder;IILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_data_values, _j_sample_infos, max_samples, previous_handle, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_data_values = deholderize<jobjectArray> (_jni, _j_data_values, "[LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_data_values);
  copyToCxx (_jni, data_values, _o_data_values);
  _jni->DeleteLocalRef (_o_data_values);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_take_1next_1instance_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject data_values, jobject sample_infos, jint max_samples, jint previous_handle, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_data_values = deholderize<jobjectArray> (_jni, data_values, "[LMissionData/NormalizedPoints;");
      MissionData::NormalizedPointsSeq _c_data_values;
      copyToCxx (_jni, _c_data_values, _j_data_values);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->take_next_instance_w_condition (_c_data_values, _c_sample_infos, max_samples, previous_handle, _c_a_condition.in ());
      copyToJava (_jni, _j_data_values, _c_data_values);
      holderize (_jni, data_values, _j_data_values, "[LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::return_loan (MissionData::NormalizedPointsSeq& received_data, DDS::SampleInfoSeq& info_seq)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/NormalizedPointsSeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/NormalizedPoints;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "return_loan", "(LMissionData/NormalizedPointsSeqHolder;LDDS/SampleInfoSeqHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_return_1loan (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/NormalizedPoints;");
      MissionData::NormalizedPointsSeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->return_loan (_c_received_data, _c_info_seq);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/NormalizedPoints;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_NormalizedPointsDataReaderJavaPeer::get_key_value (MissionData::NormalizedPoints& key_holder, DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_key_holder = 0;
  copyToJava (_jni, _n_key_holder, key_holder, true);
  jclass _hc_key_holder = findClass (_jni, "MissionData/NormalizedPointsHolder");
  jmethodID _hm_key_holder = _jni->GetMethodID (_hc_key_holder, "<init>", "()V");
  jobject _j_key_holder = _jni->NewObject (_hc_key_holder, _hm_key_holder);
  holderize (_jni, _j_key_holder, _n_key_holder, "LMissionData/NormalizedPoints;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_key_value", "(LMissionData/NormalizedPointsHolder;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_key_holder, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_key_holder = deholderize<jobject> (_jni, _j_key_holder, "LMissionData/NormalizedPoints;");
  _jni->DeleteLocalRef (_j_key_holder);
  copyToCxx (_jni, key_holder, _o_key_holder);
  _jni->DeleteLocalRef (_o_key_holder);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1key_1value (JNIEnv *_jni, jobject _jthis, jobject key_holder, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobject _j_key_holder = deholderize<jobject> (_jni, key_holder, "LMissionData/NormalizedPoints;");
      MissionData::NormalizedPoints _c_key_holder;
      copyToCxx (_jni, _c_key_holder, _j_key_holder);
      DDS::ReturnCode_t _c_ret = _this->get_key_value (_c_key_holder, handle);
      copyToJava (_jni, _j_key_holder, _c_key_holder);
      holderize (_jni, key_holder, _j_key_holder, "LMissionData/NormalizedPoints;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::InstanceHandle_t MissionData_NormalizedPointsDataReaderJavaPeer::lookup_instance (const MissionData::NormalizedPoints& instance_data)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "lookup_instance", "(LMissionData/NormalizedPoints;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_lookup_1instance (JNIEnv *_jni, jobject _jthis, jobject instance_data)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      MissionData::NormalizedPoints _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::InstanceHandle_t _c_ret = _this->lookup_instance (_c_instance_data);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1latency_1stats (JNIEnv *_jni, jobject _jthis, jobject stats)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobjectArray _j_stats = deholderize<jobjectArray> (_jni, stats, "[LOpenDDS/DCPS/LatencyStatistics;");
      OpenDDS::DCPS::LatencyStatisticsSeq _c_stats;
      copyToCxx (_jni, _c_stats, _j_stats);
      _this->get_latency_stats (_c_stats);
      copyToJava (_jni, _j_stats, _c_stats);
      holderize (_jni, stats, _j_stats, "[LOpenDDS/DCPS/LatencyStatistics;");
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_reset_1latency_1stats (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      _this->reset_latency_stats ();
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT jboolean JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_statistics_1enabled (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->statistics_enabled ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_statistics_1enabled_Z (JNIEnv *_jni, jobject _jthis, jboolean statistics_enabled_)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      _this->statistics_enabled (statistics_enabled_);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_create_1readcondition (JNIEnv *_jni, jobject _jthis, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      DDS::ReadCondition_var _c_ret = _this->create_readcondition (sample_states, view_states, instance_states);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_create_1querycondition (JNIEnv *_jni, jobject _jthis, jint sample_states, jint view_states, jint instance_states, jobject query_expression, jobjectArray query_parameters)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      CORBA::String_var _c_query_expression;
      copyToCxx (_jni, _c_query_expression, query_expression);
      DDS::StringSeq _c_query_parameters;
      copyToCxx (_jni, _c_query_parameters, query_parameters);
      DDS::QueryCondition_var _c_ret = _this->create_querycondition (sample_states, view_states, instance_states, _c_query_expression.in (), _c_query_parameters);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_delete_1readcondition (JNIEnv *_jni, jobject _jthis, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->delete_readcondition (_c_a_condition.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_delete_1contained_1entities (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->delete_contained_entities ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      DDS::DataReaderQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DataReaderQos;");
      DDS::DataReaderQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DataReaderQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_set_1listener (JNIEnv *_jni, jobject _jthis, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      DDS::DataReaderListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::ReturnCode_t _c_ret = _this->set_listener (_c_a_listener.in (), mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1listener (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      DDS::DataReaderListener_var _c_ret = _this->get_listener ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1topicdescription (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      DDS::TopicDescription_var _c_ret = _this->get_topicdescription ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1subscriber (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      DDS::Subscriber_var _c_ret = _this->get_subscriber ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1sample_1rejected_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SampleRejectedStatus;");
      DDS::SampleRejectedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_sample_rejected_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SampleRejectedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1liveliness_1changed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/LivelinessChangedStatus;");
      DDS::LivelinessChangedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_liveliness_changed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/LivelinessChangedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1requested_1deadline_1missed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/RequestedDeadlineMissedStatus;");
      DDS::RequestedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_requested_deadline_missed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/RequestedDeadlineMissedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1requested_1incompatible_1qos_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/RequestedIncompatibleQosStatus;");
      DDS::RequestedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_requested_incompatible_qos_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/RequestedIncompatibleQosStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1subscription_1matched_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SubscriptionMatchedStatus;");
      DDS::SubscriptionMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_subscription_matched_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SubscriptionMatchedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1sample_1lost_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SampleLostStatus;");
      DDS::SampleLostStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_sample_lost_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SampleLostStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_wait_1for_1historical_1data (JNIEnv *_jni, jobject _jthis, jobject max_wait)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      DDS::Duration_t _c_max_wait;
      copyToCxx (_jni, _c_max_wait, max_wait);
      DDS::ReturnCode_t _c_ret = _this->wait_for_historical_data (_c_max_wait);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1matched_1publications (JNIEnv *_jni, jobject _jthis, jobject publication_handles)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jintArray _j_publication_handles = deholderize<jintArray> (_jni, publication_handles, "[I");
      DDS::InstanceHandleSeq _c_publication_handles;
      copyToCxx (_jni, _c_publication_handles, _j_publication_handles);
      DDS::ReturnCode_t _c_ret = _this->get_matched_publications (_c_publication_handles);
      copyToJava (_jni, _j_publication_handles, _c_publication_handles);
      holderize (_jni, publication_handles, _j_publication_handles, "[I");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1matched_1publication_1data (JNIEnv *_jni, jobject _jthis, jobject publication_data, jint publication_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      jobject _j_publication_data = deholderize<jobject> (_jni, publication_data, "LDDS/PublicationBuiltinTopicData;");
      DDS::PublicationBuiltinTopicData _c_publication_data;
      copyToCxx (_jni, _c_publication_data, _j_publication_data);
      DDS::ReturnCode_t _c_ret = _this->get_matched_publication_data (_c_publication_data, publication_handle);
      copyToJava (_jni, _j_publication_data, _c_publication_data);
      holderize (_jni, publication_data, _j_publication_data, "LDDS/PublicationBuiltinTopicData;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1NormalizedPointsDataReaderTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::NormalizedPointsDataReader_var _this = MissionData::NormalizedPointsDataReader::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: NormalizedPointsDataReader */

/* End MODULE: MissionData */


/* Begin MODULE: MissionData */



/* Begin TYPEDEF: TelemetrySeq */

void copyToCxx (JNIEnv *jni, MissionData::TelemetrySeq &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const MissionData::TelemetrySeq &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "MissionData/Telemetry");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      MissionData::Telemetry var = source[i];
      copyToJava (jni, obj, var, createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: TelemetrySeq */


/* Begin INTERFACE: TelemetryTypeSupport */

void copyToCxx (JNIEnv *jni, MissionData::TelemetryTypeSupport_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = MissionData::TelemetryTypeSupport::_unchecked_narrow (c);
    }
  else
    {
      target = new MissionData_TelemetryTypeSupportJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const MissionData::TelemetryTypeSupport_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "MissionData/_TelemetryTypeSupportTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData_TelemetryTypeSupportHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  MissionData::TelemetryTypeSupport_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryTypeSupportTAOPeer_create_1datawriter (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryTypeSupport_var _this = MissionData::TelemetryTypeSupport::_narrow (_this_obj);
      DDS::DataWriter_var _c_ret = _this->create_datawriter ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryTypeSupportTAOPeer_create_1datareader (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryTypeSupport_var _this = MissionData::TelemetryTypeSupport::_narrow (_this_obj);
      DDS::DataReader_var _c_ret = _this->create_datareader ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryTypeSupportTAOPeer_create_1multitopic_1datareader (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryTypeSupport_var _this = MissionData::TelemetryTypeSupport::_narrow (_this_obj);
      DDS::DataReader_var _c_ret = _this->create_multitopic_datareader ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jboolean JNICALL
Java_MissionData__1TelemetryTypeSupportTAOPeer_has_1dcps_1key (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryTypeSupport_var _this = MissionData::TelemetryTypeSupport::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->has_dcps_key ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryTypeSupportTAOPeer_unregister_1type (JNIEnv *_jni, jobject _jthis, jobject domain, jobject type_name)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryTypeSupport_var _this = MissionData::TelemetryTypeSupport::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_domain;
      copyToCxx (_jni, _c_domain, domain);
      CORBA::String_var _c_type_name;
      copyToCxx (_jni, _c_type_name, type_name);
      DDS::ReturnCode_t _c_ret = _this->unregister_type (_c_domain.in (), _c_type_name.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryTypeSupportTAOPeer_register_1type (JNIEnv *_jni, jobject _jthis, jobject domain, jobject type_name)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryTypeSupport_var _this = MissionData::TelemetryTypeSupport::_narrow (_this_obj);
      DDS::DomainParticipant_var _c_domain;
      copyToCxx (_jni, _c_domain, domain);
      CORBA::String_var _c_type_name;
      copyToCxx (_jni, _c_type_name, type_name);
      DDS::ReturnCode_t _c_ret = _this->register_type (_c_domain.in (), _c_type_name.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryTypeSupportTAOPeer_get_1type_1name (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryTypeSupport_var _this = MissionData::TelemetryTypeSupport::_narrow (_this_obj);
      CORBA::String_var _c_ret = _this->get_type_name ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret.in (), true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: TelemetryTypeSupport */


/* Begin INTERFACE: TelemetryDataWriter */

void copyToCxx (JNIEnv *jni, MissionData::TelemetryDataWriter_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = MissionData::TelemetryDataWriter::_unchecked_narrow (c);
    }
  else
    {
      target = new MissionData_TelemetryDataWriterJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const MissionData::TelemetryDataWriter_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "MissionData/_TelemetryDataWriterTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData_TelemetryDataWriterHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  MissionData::TelemetryDataWriter_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::InstanceHandle_t MissionData_TelemetryDataWriterJavaPeer::register_instance (const MissionData::Telemetry& instance)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance = 0;
  copyToJava (_jni, _j_instance, instance, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "register_instance", "(LMissionData/Telemetry;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_register_1instance (JNIEnv *_jni, jobject _jthis, jobject instance)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      MissionData::Telemetry _c_instance;
      copyToCxx (_jni, _c_instance, instance);
      DDS::InstanceHandle_t _c_ret = _this->register_instance (_c_instance);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::InstanceHandle_t MissionData_TelemetryDataWriterJavaPeer::register_instance_w_timestamp (const MissionData::Telemetry& instance, const DDS::Time_t& timestamp)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance = 0;
  copyToJava (_jni, _j_instance, instance, true);
  jobject _j_timestamp = 0;
  copyToJava (_jni, _j_timestamp, timestamp, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "register_instance_w_timestamp", "(LMissionData/Telemetry;LDDS/Time_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance, _j_timestamp);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_register_1instance_1w_1timestamp (JNIEnv *_jni, jobject _jthis, jobject instance, jobject timestamp)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      MissionData::Telemetry _c_instance;
      copyToCxx (_jni, _c_instance, instance);
      DDS::Time_t _c_timestamp;
      copyToCxx (_jni, _c_timestamp, timestamp);
      DDS::InstanceHandle_t _c_ret = _this->register_instance_w_timestamp (_c_instance, _c_timestamp);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataWriterJavaPeer::unregister_instance (const MissionData::Telemetry& instance, DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance = 0;
  copyToJava (_jni, _j_instance, instance, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "unregister_instance", "(LMissionData/Telemetry;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_unregister_1instance (JNIEnv *_jni, jobject _jthis, jobject instance, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      MissionData::Telemetry _c_instance;
      copyToCxx (_jni, _c_instance, instance);
      DDS::ReturnCode_t _c_ret = _this->unregister_instance (_c_instance, handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataWriterJavaPeer::unregister_instance_w_timestamp (const MissionData::Telemetry& instance, DDS::InstanceHandle_t handle, const DDS::Time_t& timestamp)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance = 0;
  copyToJava (_jni, _j_instance, instance, true);
  jobject _j_timestamp = 0;
  copyToJava (_jni, _j_timestamp, timestamp, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "unregister_instance_w_timestamp", "(LMissionData/Telemetry;ILDDS/Time_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance, handle, _j_timestamp);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_unregister_1instance_1w_1timestamp (JNIEnv *_jni, jobject _jthis, jobject instance, jint handle, jobject timestamp)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      MissionData::Telemetry _c_instance;
      copyToCxx (_jni, _c_instance, instance);
      DDS::Time_t _c_timestamp;
      copyToCxx (_jni, _c_timestamp, timestamp);
      DDS::ReturnCode_t _c_ret = _this->unregister_instance_w_timestamp (_c_instance, handle, _c_timestamp);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataWriterJavaPeer::write (const MissionData::Telemetry& instance_data, DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "write", "(LMissionData/Telemetry;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_write (JNIEnv *_jni, jobject _jthis, jobject instance_data, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      MissionData::Telemetry _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::ReturnCode_t _c_ret = _this->write (_c_instance_data, handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataWriterJavaPeer::write_w_timestamp (const MissionData::Telemetry& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jobject _j_source_timestamp = 0;
  copyToJava (_jni, _j_source_timestamp, source_timestamp, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "write_w_timestamp", "(LMissionData/Telemetry;ILDDS/Time_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data, handle, _j_source_timestamp);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_write_1w_1timestamp (JNIEnv *_jni, jobject _jthis, jobject instance_data, jint handle, jobject source_timestamp)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      MissionData::Telemetry _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::Time_t _c_source_timestamp;
      copyToCxx (_jni, _c_source_timestamp, source_timestamp);
      DDS::ReturnCode_t _c_ret = _this->write_w_timestamp (_c_instance_data, handle, _c_source_timestamp);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataWriterJavaPeer::dispose (const MissionData::Telemetry& instance_data, DDS::InstanceHandle_t instance_handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "dispose", "(LMissionData/Telemetry;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data, instance_handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_dispose (JNIEnv *_jni, jobject _jthis, jobject instance_data, jint instance_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      MissionData::Telemetry _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::ReturnCode_t _c_ret = _this->dispose (_c_instance_data, instance_handle);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataWriterJavaPeer::dispose_w_timestamp (const MissionData::Telemetry& instance_data, DDS::InstanceHandle_t instance_handle, const DDS::Time_t& source_timestamp)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jobject _j_source_timestamp = 0;
  copyToJava (_jni, _j_source_timestamp, source_timestamp, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "dispose_w_timestamp", "(LMissionData/Telemetry;ILDDS/Time_t;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data, instance_handle, _j_source_timestamp);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_dispose_1w_1timestamp (JNIEnv *_jni, jobject _jthis, jobject instance_data, jint instance_handle, jobject source_timestamp)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      MissionData::Telemetry _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::Time_t _c_source_timestamp;
      copyToCxx (_jni, _c_source_timestamp, source_timestamp);
      DDS::ReturnCode_t _c_ret = _this->dispose_w_timestamp (_c_instance_data, instance_handle, _c_source_timestamp);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataWriterJavaPeer::get_key_value (MissionData::Telemetry& key_holder, DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_key_holder = 0;
  copyToJava (_jni, _n_key_holder, key_holder, true);
  jclass _hc_key_holder = findClass (_jni, "MissionData/TelemetryHolder");
  jmethodID _hm_key_holder = _jni->GetMethodID (_hc_key_holder, "<init>", "()V");
  jobject _j_key_holder = _jni->NewObject (_hc_key_holder, _hm_key_holder);
  holderize (_jni, _j_key_holder, _n_key_holder, "LMissionData/Telemetry;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_key_value", "(LMissionData/TelemetryHolder;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_key_holder, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_key_holder = deholderize<jobject> (_jni, _j_key_holder, "LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_key_holder);
  copyToCxx (_jni, key_holder, _o_key_holder);
  _jni->DeleteLocalRef (_o_key_holder);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1key_1value (JNIEnv *_jni, jobject _jthis, jobject key_holder, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      jobject _j_key_holder = deholderize<jobject> (_jni, key_holder, "LMissionData/Telemetry;");
      MissionData::Telemetry _c_key_holder;
      copyToCxx (_jni, _c_key_holder, _j_key_holder);
      DDS::ReturnCode_t _c_ret = _this->get_key_value (_c_key_holder, handle);
      copyToJava (_jni, _j_key_holder, _c_key_holder);
      holderize (_jni, key_holder, _j_key_holder, "LMissionData/Telemetry;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::InstanceHandle_t MissionData_TelemetryDataWriterJavaPeer::lookup_instance (const MissionData::Telemetry& instance_data)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "lookup_instance", "(LMissionData/Telemetry;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_lookup_1instance (JNIEnv *_jni, jobject _jthis, jobject instance_data)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      MissionData::Telemetry _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::InstanceHandle_t _c_ret = _this->lookup_instance (_c_instance_data);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      DDS::DataWriterQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DataWriterQos;");
      DDS::DataWriterQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DataWriterQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_set_1listener (JNIEnv *_jni, jobject _jthis, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      DDS::DataWriterListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::ReturnCode_t _c_ret = _this->set_listener (_c_a_listener.in (), mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1listener (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      DDS::DataWriterListener_var _c_ret = _this->get_listener ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1topic (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      DDS::Topic_var _c_ret = _this->get_topic ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1publisher (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      DDS::Publisher_var _c_ret = _this->get_publisher ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_wait_1for_1acknowledgments (JNIEnv *_jni, jobject _jthis, jobject max_wait)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      DDS::Duration_t _c_max_wait;
      copyToCxx (_jni, _c_max_wait, max_wait);
      DDS::ReturnCode_t _c_ret = _this->wait_for_acknowledgments (_c_max_wait);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1liveliness_1lost_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/LivelinessLostStatus;");
      DDS::LivelinessLostStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_liveliness_lost_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/LivelinessLostStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1offered_1deadline_1missed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/OfferedDeadlineMissedStatus;");
      DDS::OfferedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_offered_deadline_missed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/OfferedDeadlineMissedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1offered_1incompatible_1qos_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/OfferedIncompatibleQosStatus;");
      DDS::OfferedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_offered_incompatible_qos_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/OfferedIncompatibleQosStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1publication_1matched_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/PublicationMatchedStatus;");
      DDS::PublicationMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_publication_matched_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/PublicationMatchedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_assert_1liveliness (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->assert_liveliness ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1matched_1subscriptions (JNIEnv *_jni, jobject _jthis, jobject subscription_handles)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      jintArray _j_subscription_handles = deholderize<jintArray> (_jni, subscription_handles, "[I");
      DDS::InstanceHandleSeq _c_subscription_handles;
      copyToCxx (_jni, _c_subscription_handles, _j_subscription_handles);
      DDS::ReturnCode_t _c_ret = _this->get_matched_subscriptions (_c_subscription_handles);
      copyToJava (_jni, _j_subscription_handles, _c_subscription_handles);
      holderize (_jni, subscription_handles, _j_subscription_handles, "[I");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1matched_1subscription_1data (JNIEnv *_jni, jobject _jthis, jobject subscription_data, jint subscription_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      jobject _j_subscription_data = deholderize<jobject> (_jni, subscription_data, "LDDS/SubscriptionBuiltinTopicData;");
      DDS::SubscriptionBuiltinTopicData _c_subscription_data;
      copyToCxx (_jni, _c_subscription_data, _j_subscription_data);
      DDS::ReturnCode_t _c_ret = _this->get_matched_subscription_data (_c_subscription_data, subscription_handle);
      copyToJava (_jni, _j_subscription_data, _c_subscription_data);
      holderize (_jni, subscription_data, _j_subscription_data, "LDDS/SubscriptionBuiltinTopicData;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataWriterTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataWriter_var _this = MissionData::TelemetryDataWriter::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: TelemetryDataWriter */


/* Begin INTERFACE: TelemetryDataReader */

void copyToCxx (JNIEnv *jni, MissionData::TelemetryDataReader_var &target, jobject source)
{
  if (!source) return;
  jclass taoObjClazz = findClass (jni, "i2jrt/TAOObject");
  if (jni->IsInstanceOf (source, taoObjClazz))
    {
      CORBA::Object_ptr c = recoverTaoObject (jni, source);
      target = MissionData::TelemetryDataReader::_unchecked_narrow (c);
    }
  else
    {
      target = new MissionData_TelemetryDataReaderJavaPeer (jni, source);
    }
}

void copyToJava (JNIEnv *jni, jobject &target, const MissionData::TelemetryDataReader_var &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  if (CORBA::is_nil (source.in ()))
    {
      target = 0;
      return;
    }
  jclass stubClazz = findClass (jni, "MissionData/_TelemetryDataReaderTAOPeer");
  jmethodID ctor = jni->GetMethodID (stubClazz, "<init>", "(J)V");
  target = jni->NewObject (stubClazz, ctor, reinterpret_cast<jlong> (
    CORBA::Object::_duplicate (source.in ())));
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData_TelemetryDataReaderHelper_native_1unarrow (JNIEnv *jni, jclass, jobject obj)
{
  MissionData::TelemetryDataReader_var v;
  copyToCxx (jni, v, obj);
  jobject result;
  copyToJava (jni, result, v);
  return result;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::read (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/TelemetrySeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/Telemetry;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read", "(LMissionData/TelemetrySeqHolder;LDDS/SampleInfoSeqHolder;IIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_read (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/Telemetry;");
      MissionData::TelemetrySeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->read (_c_received_data, _c_info_seq, max_samples, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/Telemetry;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::take (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/TelemetrySeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/Telemetry;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take", "(LMissionData/TelemetrySeqHolder;LDDS/SampleInfoSeqHolder;IIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_take (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/Telemetry;");
      MissionData::TelemetrySeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->take (_c_received_data, _c_info_seq, max_samples, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/Telemetry;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::read_w_condition (MissionData::TelemetrySeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_data_values = 0;
  copyToJava (_jni, _n_data_values, data_values, true);
  jclass _hc_data_values = findClass (_jni, "MissionData/TelemetrySeqHolder");
  jmethodID _hm_data_values = _jni->GetMethodID (_hc_data_values, "<init>", "()V");
  jobject _j_data_values = _jni->NewObject (_hc_data_values, _hm_data_values);
  holderize (_jni, _j_data_values, _n_data_values, "[LMissionData/Telemetry;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_w_condition", "(LMissionData/TelemetrySeqHolder;LDDS/SampleInfoSeqHolder;ILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_data_values, _j_sample_infos, max_samples, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_data_values = deholderize<jobjectArray> (_jni, _j_data_values, "[LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_data_values);
  copyToCxx (_jni, data_values, _o_data_values);
  _jni->DeleteLocalRef (_o_data_values);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_read_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject data_values, jobject sample_infos, jint max_samples, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_data_values = deholderize<jobjectArray> (_jni, data_values, "[LMissionData/Telemetry;");
      MissionData::TelemetrySeq _c_data_values;
      copyToCxx (_jni, _c_data_values, _j_data_values);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->read_w_condition (_c_data_values, _c_sample_infos, max_samples, _c_a_condition.in ());
      copyToJava (_jni, _j_data_values, _c_data_values);
      holderize (_jni, data_values, _j_data_values, "[LMissionData/Telemetry;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::take_w_condition (MissionData::TelemetrySeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_data_values = 0;
  copyToJava (_jni, _n_data_values, data_values, true);
  jclass _hc_data_values = findClass (_jni, "MissionData/TelemetrySeqHolder");
  jmethodID _hm_data_values = _jni->GetMethodID (_hc_data_values, "<init>", "()V");
  jobject _j_data_values = _jni->NewObject (_hc_data_values, _hm_data_values);
  holderize (_jni, _j_data_values, _n_data_values, "[LMissionData/Telemetry;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_w_condition", "(LMissionData/TelemetrySeqHolder;LDDS/SampleInfoSeqHolder;ILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_data_values, _j_sample_infos, max_samples, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_data_values = deholderize<jobjectArray> (_jni, _j_data_values, "[LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_data_values);
  copyToCxx (_jni, data_values, _o_data_values);
  _jni->DeleteLocalRef (_o_data_values);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_take_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject data_values, jobject sample_infos, jint max_samples, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_data_values = deholderize<jobjectArray> (_jni, data_values, "[LMissionData/Telemetry;");
      MissionData::TelemetrySeq _c_data_values;
      copyToCxx (_jni, _c_data_values, _j_data_values);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->take_w_condition (_c_data_values, _c_sample_infos, max_samples, _c_a_condition.in ());
      copyToJava (_jni, _j_data_values, _c_data_values);
      holderize (_jni, data_values, _j_data_values, "[LMissionData/Telemetry;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::read_next_sample (MissionData::Telemetry& received_data, DDS::SampleInfo& sample_info)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/TelemetryHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "LMissionData/Telemetry;");
  jobject _n_sample_info = 0;
  copyToJava (_jni, _n_sample_info, sample_info, true);
  jclass _hc_sample_info = findClass (_jni, "DDS/SampleInfoHolder");
  jmethodID _hm_sample_info = _jni->GetMethodID (_hc_sample_info, "<init>", "()V");
  jobject _j_sample_info = _jni->NewObject (_hc_sample_info, _hm_sample_info);
  holderize (_jni, _j_sample_info, _n_sample_info, "LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_next_sample", "(LMissionData/TelemetryHolder;LDDS/SampleInfoHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_sample_info);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_received_data = deholderize<jobject> (_jni, _j_received_data, "LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobject _o_sample_info = deholderize<jobject> (_jni, _j_sample_info, "LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_info);
  copyToCxx (_jni, sample_info, _o_sample_info);
  _jni->DeleteLocalRef (_o_sample_info);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_read_1next_1sample (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject sample_info)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobject _j_received_data = deholderize<jobject> (_jni, received_data, "LMissionData/Telemetry;");
      MissionData::Telemetry _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobject _j_sample_info = deholderize<jobject> (_jni, sample_info, "LDDS/SampleInfo;");
      DDS::SampleInfo _c_sample_info;
      copyToCxx (_jni, _c_sample_info, _j_sample_info);
      DDS::ReturnCode_t _c_ret = _this->read_next_sample (_c_received_data, _c_sample_info);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "LMissionData/Telemetry;");
      copyToJava (_jni, _j_sample_info, _c_sample_info);
      holderize (_jni, sample_info, _j_sample_info, "LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::take_next_sample (MissionData::Telemetry& received_data, DDS::SampleInfo& sample_info)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/TelemetryHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "LMissionData/Telemetry;");
  jobject _n_sample_info = 0;
  copyToJava (_jni, _n_sample_info, sample_info, true);
  jclass _hc_sample_info = findClass (_jni, "DDS/SampleInfoHolder");
  jmethodID _hm_sample_info = _jni->GetMethodID (_hc_sample_info, "<init>", "()V");
  jobject _j_sample_info = _jni->NewObject (_hc_sample_info, _hm_sample_info);
  holderize (_jni, _j_sample_info, _n_sample_info, "LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_next_sample", "(LMissionData/TelemetryHolder;LDDS/SampleInfoHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_sample_info);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_received_data = deholderize<jobject> (_jni, _j_received_data, "LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobject _o_sample_info = deholderize<jobject> (_jni, _j_sample_info, "LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_info);
  copyToCxx (_jni, sample_info, _o_sample_info);
  _jni->DeleteLocalRef (_o_sample_info);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_take_1next_1sample (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject sample_info)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobject _j_received_data = deholderize<jobject> (_jni, received_data, "LMissionData/Telemetry;");
      MissionData::Telemetry _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobject _j_sample_info = deholderize<jobject> (_jni, sample_info, "LDDS/SampleInfo;");
      DDS::SampleInfo _c_sample_info;
      copyToCxx (_jni, _c_sample_info, _j_sample_info);
      DDS::ReturnCode_t _c_ret = _this->take_next_sample (_c_received_data, _c_sample_info);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "LMissionData/Telemetry;");
      copyToJava (_jni, _j_sample_info, _c_sample_info);
      holderize (_jni, sample_info, _j_sample_info, "LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::read_instance (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/TelemetrySeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/Telemetry;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_instance", "(LMissionData/TelemetrySeqHolder;LDDS/SampleInfoSeqHolder;IIIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_read_1instance (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint a_handle, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/Telemetry;");
      MissionData::TelemetrySeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->read_instance (_c_received_data, _c_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/Telemetry;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::take_instance (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/TelemetrySeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/Telemetry;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_instance", "(LMissionData/TelemetrySeqHolder;LDDS/SampleInfoSeqHolder;IIIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_take_1instance (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint a_handle, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/Telemetry;");
      MissionData::TelemetrySeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->take_instance (_c_received_data, _c_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/Telemetry;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::read_instance_w_condition (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/TelemetrySeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/Telemetry;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_instance_w_condition", "(LMissionData/TelemetrySeqHolder;LDDS/SampleInfoSeqHolder;IILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_sample_infos, max_samples, a_handle, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_read_1instance_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject sample_infos, jint max_samples, jint a_handle, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/Telemetry;");
      MissionData::TelemetrySeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->read_instance_w_condition (_c_received_data, _c_sample_infos, max_samples, a_handle, _c_a_condition.in ());
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/Telemetry;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::take_instance_w_condition (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/TelemetrySeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/Telemetry;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_instance_w_condition", "(LMissionData/TelemetrySeqHolder;LDDS/SampleInfoSeqHolder;IILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_sample_infos, max_samples, a_handle, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_take_1instance_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject sample_infos, jint max_samples, jint a_handle, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/Telemetry;");
      MissionData::TelemetrySeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->take_instance_w_condition (_c_received_data, _c_sample_infos, max_samples, a_handle, _c_a_condition.in ());
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/Telemetry;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::read_next_instance (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/TelemetrySeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/Telemetry;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_next_instance", "(LMissionData/TelemetrySeqHolder;LDDS/SampleInfoSeqHolder;IIIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_read_1next_1instance (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint a_handle, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/Telemetry;");
      MissionData::TelemetrySeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->read_next_instance (_c_received_data, _c_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/Telemetry;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::take_next_instance (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq, CORBA::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/TelemetrySeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/Telemetry;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_next_instance", "(LMissionData/TelemetrySeqHolder;LDDS/SampleInfoSeqHolder;IIIII)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_take_1next_1instance (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq, jint max_samples, jint a_handle, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/Telemetry;");
      MissionData::TelemetrySeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->take_next_instance (_c_received_data, _c_info_seq, max_samples, a_handle, sample_states, view_states, instance_states);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/Telemetry;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::read_next_instance_w_condition (MissionData::TelemetrySeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_data_values = 0;
  copyToJava (_jni, _n_data_values, data_values, true);
  jclass _hc_data_values = findClass (_jni, "MissionData/TelemetrySeqHolder");
  jmethodID _hm_data_values = _jni->GetMethodID (_hc_data_values, "<init>", "()V");
  jobject _j_data_values = _jni->NewObject (_hc_data_values, _hm_data_values);
  holderize (_jni, _j_data_values, _n_data_values, "[LMissionData/Telemetry;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "read_next_instance_w_condition", "(LMissionData/TelemetrySeqHolder;LDDS/SampleInfoSeqHolder;IILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_data_values, _j_sample_infos, max_samples, previous_handle, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_data_values = deholderize<jobjectArray> (_jni, _j_data_values, "[LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_data_values);
  copyToCxx (_jni, data_values, _o_data_values);
  _jni->DeleteLocalRef (_o_data_values);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_read_1next_1instance_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject data_values, jobject sample_infos, jint max_samples, jint previous_handle, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_data_values = deholderize<jobjectArray> (_jni, data_values, "[LMissionData/Telemetry;");
      MissionData::TelemetrySeq _c_data_values;
      copyToCxx (_jni, _c_data_values, _j_data_values);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->read_next_instance_w_condition (_c_data_values, _c_sample_infos, max_samples, previous_handle, _c_a_condition.in ());
      copyToJava (_jni, _j_data_values, _c_data_values);
      holderize (_jni, data_values, _j_data_values, "[LMissionData/Telemetry;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::take_next_instance_w_condition (MissionData::TelemetrySeq& data_values, DDS::SampleInfoSeq& sample_infos, CORBA::Long max_samples, DDS::InstanceHandle_t previous_handle, DDS::ReadCondition_ptr a_condition)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_data_values = 0;
  copyToJava (_jni, _n_data_values, data_values, true);
  jclass _hc_data_values = findClass (_jni, "MissionData/TelemetrySeqHolder");
  jmethodID _hm_data_values = _jni->GetMethodID (_hc_data_values, "<init>", "()V");
  jobject _j_data_values = _jni->NewObject (_hc_data_values, _hm_data_values);
  holderize (_jni, _j_data_values, _n_data_values, "[LMissionData/Telemetry;");
  jobjectArray _n_sample_infos = 0;
  copyToJava (_jni, _n_sample_infos, sample_infos, true);
  jclass _hc_sample_infos = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_sample_infos = _jni->GetMethodID (_hc_sample_infos, "<init>", "()V");
  jobject _j_sample_infos = _jni->NewObject (_hc_sample_infos, _hm_sample_infos);
  holderize (_jni, _j_sample_infos, _n_sample_infos, "[LDDS/SampleInfo;");
  jobject _j_a_condition = 0;
  DDS::ReadCondition_var _c_a_condition = DDS::ReadCondition::_duplicate (a_condition);
  copyToJava (_jni, _j_a_condition, _c_a_condition, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "take_next_instance_w_condition", "(LMissionData/TelemetrySeqHolder;LDDS/SampleInfoSeqHolder;IILDDS/ReadCondition;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_data_values, _j_sample_infos, max_samples, previous_handle, _j_a_condition);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_data_values = deholderize<jobjectArray> (_jni, _j_data_values, "[LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_data_values);
  copyToCxx (_jni, data_values, _o_data_values);
  _jni->DeleteLocalRef (_o_data_values);
  jobjectArray _o_sample_infos = deholderize<jobjectArray> (_jni, _j_sample_infos, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_sample_infos);
  copyToCxx (_jni, sample_infos, _o_sample_infos);
  _jni->DeleteLocalRef (_o_sample_infos);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_take_1next_1instance_1w_1condition (JNIEnv *_jni, jobject _jthis, jobject data_values, jobject sample_infos, jint max_samples, jint previous_handle, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_data_values = deholderize<jobjectArray> (_jni, data_values, "[LMissionData/Telemetry;");
      MissionData::TelemetrySeq _c_data_values;
      copyToCxx (_jni, _c_data_values, _j_data_values);
      jobjectArray _j_sample_infos = deholderize<jobjectArray> (_jni, sample_infos, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_sample_infos;
      copyToCxx (_jni, _c_sample_infos, _j_sample_infos);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->take_next_instance_w_condition (_c_data_values, _c_sample_infos, max_samples, previous_handle, _c_a_condition.in ());
      copyToJava (_jni, _j_data_values, _c_data_values);
      holderize (_jni, data_values, _j_data_values, "[LMissionData/Telemetry;");
      copyToJava (_jni, _j_sample_infos, _c_sample_infos);
      holderize (_jni, sample_infos, _j_sample_infos, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::return_loan (MissionData::TelemetrySeq& received_data, DDS::SampleInfoSeq& info_seq)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobjectArray _n_received_data = 0;
  copyToJava (_jni, _n_received_data, received_data, true);
  jclass _hc_received_data = findClass (_jni, "MissionData/TelemetrySeqHolder");
  jmethodID _hm_received_data = _jni->GetMethodID (_hc_received_data, "<init>", "()V");
  jobject _j_received_data = _jni->NewObject (_hc_received_data, _hm_received_data);
  holderize (_jni, _j_received_data, _n_received_data, "[LMissionData/Telemetry;");
  jobjectArray _n_info_seq = 0;
  copyToJava (_jni, _n_info_seq, info_seq, true);
  jclass _hc_info_seq = findClass (_jni, "DDS/SampleInfoSeqHolder");
  jmethodID _hm_info_seq = _jni->GetMethodID (_hc_info_seq, "<init>", "()V");
  jobject _j_info_seq = _jni->NewObject (_hc_info_seq, _hm_info_seq);
  holderize (_jni, _j_info_seq, _n_info_seq, "[LDDS/SampleInfo;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "return_loan", "(LMissionData/TelemetrySeqHolder;LDDS/SampleInfoSeqHolder;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_received_data, _j_info_seq);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobjectArray _o_received_data = deholderize<jobjectArray> (_jni, _j_received_data, "[LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_received_data);
  copyToCxx (_jni, received_data, _o_received_data);
  _jni->DeleteLocalRef (_o_received_data);
  jobjectArray _o_info_seq = deholderize<jobjectArray> (_jni, _j_info_seq, "[LDDS/SampleInfo;");
  _jni->DeleteLocalRef (_j_info_seq);
  copyToCxx (_jni, info_seq, _o_info_seq);
  _jni->DeleteLocalRef (_o_info_seq);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_return_1loan (JNIEnv *_jni, jobject _jthis, jobject received_data, jobject info_seq)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_received_data = deholderize<jobjectArray> (_jni, received_data, "[LMissionData/Telemetry;");
      MissionData::TelemetrySeq _c_received_data;
      copyToCxx (_jni, _c_received_data, _j_received_data);
      jobjectArray _j_info_seq = deholderize<jobjectArray> (_jni, info_seq, "[LDDS/SampleInfo;");
      DDS::SampleInfoSeq _c_info_seq;
      copyToCxx (_jni, _c_info_seq, _j_info_seq);
      DDS::ReturnCode_t _c_ret = _this->return_loan (_c_received_data, _c_info_seq);
      copyToJava (_jni, _j_received_data, _c_received_data);
      holderize (_jni, received_data, _j_received_data, "[LMissionData/Telemetry;");
      copyToJava (_jni, _j_info_seq, _c_info_seq);
      holderize (_jni, info_seq, _j_info_seq, "[LDDS/SampleInfo;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::ReturnCode_t MissionData_TelemetryDataReaderJavaPeer::get_key_value (MissionData::Telemetry& key_holder, DDS::InstanceHandle_t handle)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _n_key_holder = 0;
  copyToJava (_jni, _n_key_holder, key_holder, true);
  jclass _hc_key_holder = findClass (_jni, "MissionData/TelemetryHolder");
  jmethodID _hm_key_holder = _jni->GetMethodID (_hc_key_holder, "<init>", "()V");
  jobject _j_key_holder = _jni->NewObject (_hc_key_holder, _hm_key_holder);
  holderize (_jni, _j_key_holder, _n_key_holder, "LMissionData/Telemetry;");
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "get_key_value", "(LMissionData/TelemetryHolder;I)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_key_holder, handle);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  jobject _o_key_holder = deholderize<jobject> (_jni, _j_key_holder, "LMissionData/Telemetry;");
  _jni->DeleteLocalRef (_j_key_holder);
  copyToCxx (_jni, key_holder, _o_key_holder);
  _jni->DeleteLocalRef (_o_key_holder);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1key_1value (JNIEnv *_jni, jobject _jthis, jobject key_holder, jint handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobject _j_key_holder = deholderize<jobject> (_jni, key_holder, "LMissionData/Telemetry;");
      MissionData::Telemetry _c_key_holder;
      copyToCxx (_jni, _c_key_holder, _j_key_holder);
      DDS::ReturnCode_t _c_ret = _this->get_key_value (_c_key_holder, handle);
      copyToJava (_jni, _j_key_holder, _c_key_holder);
      holderize (_jni, key_holder, _j_key_holder, "LMissionData/Telemetry;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

DDS::InstanceHandle_t MissionData_TelemetryDataReaderJavaPeer::lookup_instance (const MissionData::Telemetry& instance_data)
{
  JNIThreadAttacher _jta (jvm_, cl_);
  JNIEnv *_jni = _jta.getJNI ();
  jobject _j_instance_data = 0;
  copyToJava (_jni, _j_instance_data, instance_data, true);
  jclass _clazz = _jni->GetObjectClass (globalCallback_);
  jmethodID _mid = _jni->GetMethodID (_clazz, "lookup_instance", "(LMissionData/Telemetry;)I");
  jint _j_ret = _jni->CallIntMethod (globalCallback_, _mid, _j_instance_data);
  jthrowable _excep = _jni->ExceptionOccurred ();
  if (_excep) throw_cxx_exception (_jni, _excep);
  return _j_ret;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_lookup_1instance (JNIEnv *_jni, jobject _jthis, jobject instance_data)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      MissionData::Telemetry _c_instance_data;
      copyToCxx (_jni, _c_instance_data, instance_data);
      DDS::InstanceHandle_t _c_ret = _this->lookup_instance (_c_instance_data);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1latency_1stats (JNIEnv *_jni, jobject _jthis, jobject stats)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobjectArray _j_stats = deholderize<jobjectArray> (_jni, stats, "[LOpenDDS/DCPS/LatencyStatistics;");
      OpenDDS::DCPS::LatencyStatisticsSeq _c_stats;
      copyToCxx (_jni, _c_stats, _j_stats);
      _this->get_latency_stats (_c_stats);
      copyToJava (_jni, _j_stats, _c_stats);
      holderize (_jni, stats, _j_stats, "[LOpenDDS/DCPS/LatencyStatistics;");
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT void JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_reset_1latency_1stats (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      _this->reset_latency_stats ();
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT jboolean JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_statistics_1enabled (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      CORBA::Boolean _c_ret = _this->statistics_enabled ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT void JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_statistics_1enabled_Z (JNIEnv *_jni, jobject _jthis, jboolean statistics_enabled_)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      _this->statistics_enabled (statistics_enabled_);
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_create_1readcondition (JNIEnv *_jni, jobject _jthis, jint sample_states, jint view_states, jint instance_states)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      DDS::ReadCondition_var _c_ret = _this->create_readcondition (sample_states, view_states, instance_states);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_create_1querycondition (JNIEnv *_jni, jobject _jthis, jint sample_states, jint view_states, jint instance_states, jobject query_expression, jobjectArray query_parameters)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      CORBA::String_var _c_query_expression;
      copyToCxx (_jni, _c_query_expression, query_expression);
      DDS::StringSeq _c_query_parameters;
      copyToCxx (_jni, _c_query_parameters, query_parameters);
      DDS::QueryCondition_var _c_ret = _this->create_querycondition (sample_states, view_states, instance_states, _c_query_expression.in (), _c_query_parameters);
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_delete_1readcondition (JNIEnv *_jni, jobject _jthis, jobject a_condition)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      DDS::ReadCondition_var _c_a_condition;
      copyToCxx (_jni, _c_a_condition, a_condition);
      DDS::ReturnCode_t _c_ret = _this->delete_readcondition (_c_a_condition.in ());
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_delete_1contained_1entities (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->delete_contained_entities ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_set_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      DDS::DataReaderQos _c_qos;
      copyToCxx (_jni, _c_qos, qos);
      DDS::ReturnCode_t _c_ret = _this->set_qos (_c_qos);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1qos (JNIEnv *_jni, jobject _jthis, jobject qos)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobject _j_qos = deholderize<jobject> (_jni, qos, "LDDS/DataReaderQos;");
      DDS::DataReaderQos _c_qos;
      copyToCxx (_jni, _c_qos, _j_qos);
      DDS::ReturnCode_t _c_ret = _this->get_qos (_c_qos);
      copyToJava (_jni, _j_qos, _c_qos);
      holderize (_jni, qos, _j_qos, "LDDS/DataReaderQos;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_set_1listener (JNIEnv *_jni, jobject _jthis, jobject a_listener, jint mask)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      DDS::DataReaderListener_var _c_a_listener;
      copyToCxx (_jni, _c_a_listener, a_listener);
      DDS::ReturnCode_t _c_ret = _this->set_listener (_c_a_listener.in (), mask);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1listener (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      DDS::DataReaderListener_var _c_ret = _this->get_listener ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1topicdescription (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      DDS::TopicDescription_var _c_ret = _this->get_topicdescription ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1subscriber (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      DDS::Subscriber_var _c_ret = _this->get_subscriber ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1sample_1rejected_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SampleRejectedStatus;");
      DDS::SampleRejectedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_sample_rejected_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SampleRejectedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1liveliness_1changed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/LivelinessChangedStatus;");
      DDS::LivelinessChangedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_liveliness_changed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/LivelinessChangedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1requested_1deadline_1missed_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/RequestedDeadlineMissedStatus;");
      DDS::RequestedDeadlineMissedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_requested_deadline_missed_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/RequestedDeadlineMissedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1requested_1incompatible_1qos_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/RequestedIncompatibleQosStatus;");
      DDS::RequestedIncompatibleQosStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_requested_incompatible_qos_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/RequestedIncompatibleQosStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1subscription_1matched_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SubscriptionMatchedStatus;");
      DDS::SubscriptionMatchedStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_subscription_matched_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SubscriptionMatchedStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1sample_1lost_1status (JNIEnv *_jni, jobject _jthis, jobject status)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobject _j_status = deholderize<jobject> (_jni, status, "LDDS/SampleLostStatus;");
      DDS::SampleLostStatus _c_status;
      copyToCxx (_jni, _c_status, _j_status);
      DDS::ReturnCode_t _c_ret = _this->get_sample_lost_status (_c_status);
      copyToJava (_jni, _j_status, _c_status);
      holderize (_jni, status, _j_status, "LDDS/SampleLostStatus;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_wait_1for_1historical_1data (JNIEnv *_jni, jobject _jthis, jobject max_wait)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      DDS::Duration_t _c_max_wait;
      copyToCxx (_jni, _c_max_wait, max_wait);
      DDS::ReturnCode_t _c_ret = _this->wait_for_historical_data (_c_max_wait);
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1matched_1publications (JNIEnv *_jni, jobject _jthis, jobject publication_handles)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jintArray _j_publication_handles = deholderize<jintArray> (_jni, publication_handles, "[I");
      DDS::InstanceHandleSeq _c_publication_handles;
      copyToCxx (_jni, _c_publication_handles, _j_publication_handles);
      DDS::ReturnCode_t _c_ret = _this->get_matched_publications (_c_publication_handles);
      copyToJava (_jni, _j_publication_handles, _c_publication_handles);
      holderize (_jni, publication_handles, _j_publication_handles, "[I");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1matched_1publication_1data (JNIEnv *_jni, jobject _jthis, jobject publication_data, jint publication_handle)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      jobject _j_publication_data = deholderize<jobject> (_jni, publication_data, "LDDS/PublicationBuiltinTopicData;");
      DDS::PublicationBuiltinTopicData _c_publication_data;
      copyToCxx (_jni, _c_publication_data, _j_publication_data);
      DDS::ReturnCode_t _c_ret = _this->get_matched_publication_data (_c_publication_data, publication_handle);
      copyToJava (_jni, _j_publication_data, _c_publication_data);
      holderize (_jni, publication_data, _j_publication_data, "LDDS/PublicationBuiltinTopicData;");
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_enable (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      DDS::ReturnCode_t _c_ret = _this->enable ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jobject JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1statuscondition (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      DDS::StatusCondition_var _c_ret = _this->get_statuscondition ();
      jobject _j_ret = 0;
      copyToJava (_jni, _j_ret, _c_ret, true);
      return _j_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1status_1changes (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      DDS::StatusMask _c_ret = _this->get_status_changes ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}

extern "C" JNIEXPORT jint JNICALL
Java_MissionData__1TelemetryDataReaderTAOPeer_get_1instance_1handle (JNIEnv *_jni, jobject _jthis)
{
  CORBA::Object_ptr _this_obj = recoverTaoObject (_jni, _jthis);
  try
    {
      MissionData::TelemetryDataReader_var _this = MissionData::TelemetryDataReader::_narrow (_this_obj);
      DDS::InstanceHandle_t _c_ret = _this->get_instance_handle ();
      return _c_ret;
    }
  catch (const CORBA::SystemException &_se)
    {
      throw_java_exception (_jni, _se);
    }
  return 0;
}


/* End INTERFACE: TelemetryDataReader */

/* End MODULE: MissionData */
