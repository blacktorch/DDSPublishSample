#include "MissionDataJC.h"
#include "idl2jni_runtime.h"

/* Generated by /Users/chidiebereonyedinma/Documents/DDS/OpenDDS-3.13.3/bin/idl2jni running on input file MissionData.idl */


/* Begin MODULE: MissionData */



/* Begin TYPEDEF: PlanData */

void copyToCxx (JNIEnv *jni, MissionData::PlanData &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const MissionData::PlanData &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "java/lang/String");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      copyToJava (jni, obj, source[i], createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: PlanData */


/* Begin STRUCT: MissionPlan */

void copyToCxx (JNIEnv *jni, MissionData::MissionPlan &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "from", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.from, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "planId", "I");
    target.planId = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "plan_data", "[Ljava/lang/String;");
    jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.plan_data, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "obstacles", "[Ljava/lang/String;");
    jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.obstacles, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const MissionData::MissionPlan &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "MissionData/MissionPlan");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "from", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.from, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "planId", "I");
    jni->SetIntField (target, fid, source.planId);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "plan_data", "[Ljava/lang/String;");
    jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.plan_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "obstacles", "[Ljava/lang/String;");
    jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.obstacles, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: MissionPlan */


/* Begin TYPEDEF: Points */

void copyToCxx (JNIEnv *jni, MissionData::Points &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const MissionData::Points &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "java/lang/String");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      copyToJava (jni, obj, source[i], createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: Points */


/* Begin STRUCT: NormalizedPoints */

void copyToCxx (JNIEnv *jni, MissionData::NormalizedPoints &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "from", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.from, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "pointsId", "I");
    target.pointsId = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "points_data", "[Ljava/lang/String;");
    jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.points_data, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const MissionData::NormalizedPoints &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "MissionData/NormalizedPoints");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "from", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.from, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "pointsId", "I");
    jni->SetIntField (target, fid, source.pointsId);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "points_data", "[Ljava/lang/String;");
    jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.points_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: NormalizedPoints */


/* Begin TYPEDEF: TelemetryData */

void copyToCxx (JNIEnv *jni, MissionData::TelemetryData &target, jobjectArray source)
{
  jobjectArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = jni->GetObjectArrayElement (arr, i);
      copyToCxx (jni, target[i], obj);
      jni->DeleteLocalRef (obj);
    }
}

void copyToJava (JNIEnv *jni, jobjectArray &target, const MissionData::TelemetryData &source, bool createNewObject)
{
  jsize len = source.length ();
  jobjectArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      jclass clazz = findClass (jni, "java/lang/String");
      arr = jni->NewObjectArray (len, clazz, 0);
    }
  else
    {
      arr = target;
    }
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      jobject obj = createNewObject ? 0 : jni->GetObjectArrayElement (arr, i);
      copyToJava (jni, obj, source[i], createNewObject);
      jni->SetObjectArrayElement (arr, i, obj);
      jni->DeleteLocalRef (obj);
    }
  target = arr;
}


/* End TYPEDEF: TelemetryData */


/* Begin TYPEDEF: ImageData */

void copyToCxx (JNIEnv *jni, MissionData::ImageData &target, jbyteArray source)
{
  jbyteArray arr = source;
  jsize len = jni->GetArrayLength (arr);
  target.length (len);
  jbyte *buf = jni->GetByteArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      target[i] = buf[i];
    }
  jni->ReleaseByteArrayElements (arr, buf, JNI_ABORT);
}

void copyToJava (JNIEnv *jni, jbyteArray &target, const MissionData::ImageData &source, bool createNewObject)
{
  jsize len = source.length ();
  jbyteArray arr;
  if (!createNewObject && jni->GetArrayLength (target) != len) createNewObject = true;
  if (createNewObject)
    {
      arr = jni->NewByteArray (len);
    }
  else
    {
      arr = target;
    }
  jbyte *buf = jni->GetByteArrayElements (arr, 0);
  for (CORBA::ULong i = 0; i < static_cast<CORBA::ULong> (len); ++i)
    {
      buf[i] = source[i];
    }
  jni->ReleaseByteArrayElements (arr, buf, 0);
  target = arr;
}


/* End TYPEDEF: ImageData */


/* Begin STRUCT: Telemetry */

void copyToCxx (JNIEnv *jni, MissionData::Telemetry &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "from", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.from, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "telemetryId", "I");
    target.telemetryId = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "telemetry_data", "[Ljava/lang/String;");
    jobjectArray obj = static_cast<jobjectArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.telemetry_data, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "image", "[B");
    jbyteArray obj = static_cast<jbyteArray> (jni->GetObjectField (source, fid));
    copyToCxx (jni, target.image, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const MissionData::Telemetry &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "MissionData/Telemetry");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "from", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.from, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "telemetryId", "I");
    jni->SetIntField (target, fid, source.telemetryId);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "telemetry_data", "[Ljava/lang/String;");
    jobjectArray obj = createNewObject ? 0 : static_cast<jobjectArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.telemetry_data, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "image", "[B");
    jbyteArray obj = createNewObject ? 0 : static_cast<jbyteArray> (jni->GetObjectField (target, fid));
    copyToJava (jni, obj, source.image, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: Telemetry */

/* End MODULE: MissionData */
